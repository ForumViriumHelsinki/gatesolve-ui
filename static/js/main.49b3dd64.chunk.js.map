{"version":3,"sources":["map-style.ts","components/Pin.tsx","components/UserPosition.tsx","components/GeolocateControl.tsx","planner-config.ts","planner.ts","overpass.ts","App.tsx","mapbox-utils.ts","serviceWorker.ts","index.tsx"],"names":["routeLineLayer","id","type","paint","routePointLayer","filter","allEntrancesLayer","minzoom","maxzoom","allEntrancesSymbolLayer","layout","routePointSymbolLayer","SVG_PATH","Pin","height","style","fill","stroke","dataTestId","data-testid","viewBox","pointerEvents","d","cursor","UserPosition","width","strokeWidth","position","cx","cy","r","GeolocateControl","onGeolocate","onGeolocateError","positionOptions","enableHighAccuracy","timeout","onEnable","onDisable","enableOnMount","useState","window","navigator","geolocation","isGeolocationSupported","permissions","isPermissionsSupported","permissionState","setPermissionState","watchID","setWatchId","hasBeenUsed","setHasBeenUsed","startWatching","watchPosition","stopWatching","clearWatch","showWarningOfDeniedGeolocation","console","log","useEffect","query","name","then","permissionStatus","state","onchange","this","catch","error","isClickingAllowed","isGeolocationOn","element","ariaLabel","buttonClassName","className","aria-label","aria-pressed","onContextMenu","event","preventDefault","onClick","assert","undefined","aria-hidden","rootUri","process","REACT_APP_ROUTABLE_TILES","replace","RoutableTileProviderLocalhost","coordinate","zoom","x","y","RoutableTileProviderDefault","container","unbind","TYPES","RoutableTileProvider","bind","to","inSingletonScope","whenTargetTagged","RoutingPhase","Base","Transit","Planner","FlexibleRoadPlanner","extractGeometry","path","coordinates","obstacles","obstacleWays","Map","imaginaryWays","legs","getSteps","forEach","step","startLocation","stopLocation","node","context","through","definedTags","has","set","get","push","longitude","latitude","freeformTags","Array","from","values","geometryToGeoJSON","origin","targets","entrances","routeGeometries","features","geometry","properties","color","target","lon","lat","entrance","ref","tags","opacity","latLngToDestination","latLng","initialState","destination","route","viewport","bearing","pitch","isGeolocating","geolocationTimestamp","geolocationPosition","metropolitanAreaCenter","transformRequest","originalURL","url","parseLatLng","text","split","map","Number","fitBounds","viewportOptions","latLngs","WebMercatorViewport","minLng","Math","min","maxLng","max","minLat","maxLat","padding","top","bottom","left","right","App","useRef","current","mapboxgl","getMap","on","iconId","startsWith","size","svgData","pinAsSVG","imageId","ratio","devicePixelRatio","canvas","document","createElement","ctx","getContext","img","Image","svgDataUrl","encodeURIComponent","onload","Error","drawImage","addImage","getImageData","pixelRatio","src","addImageSVG","urlMatch","useRouteMatch","setState","getContainer","clientWidth","clientHeight","params","extendedViewport","prevState","history","useHistory","location","pathname","URL","searchParams","append","fetch","toString","response","json","body","elements","queryEntrances","result","length","callback","planner","setProfileID","take","a","completePath","geoJSON","calculatePlan","geojson","extendedGeojson","concat","sources","center","onSuggestionSelected","suggestion","source_id","mapStyle","onViewportChange","onHover","feature","mapboxOverlaysElement","querySelector","queryRenderedFeatures","point","lngLat","lng","onContextmenu","update","coords","timestamp","offset","tiles","source-layer","source","data","draggable","onDragEnd","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.49b3dd64.chunk.js","sourcesContent":["import type { LayerProps } from \"react-map-gl\";\n\nexport const routeLineLayer: LayerProps = {\n  id: \"route-line\",\n  type: \"line\",\n  paint: {\n    \"line-opacity\": [\"coalesce\", [\"get\", \"opacity\"], 0.5],\n    \"line-width\": 5,\n    \"line-color\": [\"get\", \"color\"],\n  },\n};\n\nexport const routePointLayer: LayerProps = {\n  id: \"route-point\",\n  type: \"circle\",\n  paint: {\n    \"circle-opacity\": [\"coalesce\", [\"get\", \"opacity\"], 1],\n    \"circle-radius\": 5,\n    \"circle-color\": [\"get\", \"color\"],\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n\nexport const allEntrancesLayer: LayerProps = {\n  id: \"entrance-point\",\n  type: \"circle\",\n  minzoom: 12,\n  maxzoom: 15.99999,\n  paint: {\n    \"circle-radius\": [\n      \"interpolate\",\n      [\"linear\"],\n      [\"zoom\"],\n      12, // At zoom 12 or less,\n      1, // circle radius is 1.\n      14, // At zoom 14,\n      3, // circle radius is 3.\n      15, // At zoom 15 or more,\n      5, // circle radius is 5.\n    ],\n    \"circle-color\": \"#64be14\",\n  },\n  filter: [\"has\", \"entrance\"],\n};\n\nexport const allEntrancesSymbolLayer: LayerProps = {\n  id: \"entrance-symbol\",\n  type: \"symbol\",\n  minzoom: 16,\n  paint: {\n    \"text-color\": \"#fff\",\n    \"text-halo-color\": \"#64be14\",\n    \"text-halo-width\": 3,\n  },\n  layout: {\n    \"text-field\": [\"coalesce\", [\"get\", \"ref\"], [\"get\", \"addr:unit\"]],\n    \"text-anchor\": \"center\",\n    \"text-font\": [\"Klokantech Noto Sans Regular\"],\n    \"text-size\": 24,\n    \"text-offset\": [0, -1.3],\n    \"icon-image\": \"icon-pin-48-#64be14-#fff\",\n    \"icon-anchor\": \"bottom\",\n    \"icon-allow-overlap\": true,\n    \"text-allow-overlap\": true,\n  },\n  filter: [\"has\", \"entrance\"],\n};\n\nexport const routePointSymbolLayer: LayerProps = {\n  id: \"route-point-symbol\",\n  type: \"symbol\",\n  paint: {\n    \"text-color\": \"#000\",\n    \"text-halo-color\": \"#fff\",\n    \"text-halo-width\": 3,\n  },\n  layout: {\n    \"text-field\": [\"get\", \"ref\"],\n    \"text-anchor\": \"center\",\n    \"text-font\": [\"Klokantech Noto Sans Regular\"],\n    \"text-size\": 24,\n    \"text-offset\": [0, -0.05],\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n","import React from \"react\";\n\nexport interface PinProps {\n  height?: string;\n  style?: React.CSSProperties;\n  dataTestId?: string;\n}\n\nconst SVG_VIEWBOX = \"-1 -1 17 17\";\nconst SVG_PATH =\n  \"M7.5 0C5.068 0 2.23 1.486 2.23 5.27c0 2.568 4.054 8.244 5.27 9.73c1.081-1.486 5.27-7.027 5.27-9.73C12.77 1.487 9.932 0 7.5 0z\";\n\nexport const pinAsSVG = (size: number, style: string): string => `\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"${size}px\"\n  height=\"${size}px\"\n  style=\"${style}\"\n  viewBox=\"${SVG_VIEWBOX}\"\n>\n  <path d=\"${SVG_PATH}\" />\n</svg>`;\n\nconst Pin: React.FC<PinProps> = ({\n  height = \"50\",\n  style = { fill: \"#444\", stroke: \"none\" },\n  dataTestId,\n}) => {\n  return (\n    <svg\n      data-testid={dataTestId}\n      height={height}\n      style={style}\n      viewBox={SVG_VIEWBOX}\n      pointerEvents=\"none\"\n    >\n      <path d={SVG_PATH} pointerEvents=\"visiblepainted\" cursor=\"pointer\" />\n    </svg>\n  );\n};\n\nexport default Pin;\n","import React from \"react\";\n\nexport interface UserPositionProps {\n  dataTestId?: string;\n  width?: string;\n  height?: string;\n  stroke?: string;\n  strokeWidth?: string;\n}\n\nconst UserPosition: React.FC<UserPositionProps> = ({\n  dataTestId,\n  width = \"40\",\n  height = \"40\",\n  stroke = \"#00afff\",\n  strokeWidth = \"16\",\n}) => (\n  <svg\n    data-testid={dataTestId}\n    width={width}\n    height={height}\n    stroke={stroke}\n    strokeWidth={strokeWidth}\n    viewBox=\"-100 -100 200 200\"\n    fill=\"transparent\"\n    style={{ position: \"absolute\" }}\n  >\n    <circle cx=\"0\" cy=\"0\" r=\"24\" />\n    <circle cx=\"0\" cy=\"0\" r=\"46\" />\n    <circle cx=\"0\" cy=\"0\" r=\"68\" />\n  </svg>\n);\n\nexport default UserPosition;\n","import React, { useState, useEffect } from \"react\";\nimport type { MouseEventHandler } from \"react\";\n\nexport interface GeolocateControlProps {\n  dataTestId?: string;\n  onGeolocate: PositionCallback;\n  onGeolocateError?: PositionErrorCallback;\n  positionOptions?: PositionOptions;\n  onEnable?: () => void;\n  onDisable?: () => void;\n  enableOnMount?: boolean;\n}\n\nconst GeolocateControl: React.FC<GeolocateControlProps> = ({\n  dataTestId,\n  onGeolocate,\n  onGeolocateError,\n  positionOptions = { enableHighAccuracy: true, timeout: 6000 },\n  onEnable,\n  onDisable,\n  enableOnMount = true,\n}) => {\n  const [isGeolocationSupported] = useState(\n    window.navigator.geolocation != null\n  );\n  const [isPermissionsSupported] = useState(\n    window.navigator.permissions != null\n  );\n  const [permissionState, setPermissionState] = useState(\n    null as PermissionState | null\n  );\n  const [watchID, setWatchId] = useState(null as number | null);\n  const [hasBeenUsed, setHasBeenUsed] = useState(false);\n\n  const checkGeolocationPermission = (): void => {\n    if (isPermissionsSupported) {\n      window.navigator.permissions\n        .query({ name: \"geolocation\" })\n        .then((permissionStatus) => {\n          setPermissionState(permissionStatus.state);\n          function setPermissionStateOnChange(this: PermissionStatus): void {\n            setPermissionState(this.state);\n          }\n          // eslint-disable-next-line no-param-reassign\n          permissionStatus.onchange = setPermissionStateOnChange;\n        })\n        .catch((error) => {\n          // FIXME: Warn properly\n          // eslint-disable-next-line no-console\n          console.error(\"Permissions API exists but querying it fails:\", error);\n        });\n    }\n  };\n\n  const startWatching = (): void => {\n    if (isGeolocationSupported && watchID == null) {\n      setWatchId(\n        window.navigator.geolocation.watchPosition(\n          onGeolocate,\n          onGeolocateError,\n          positionOptions\n        )\n      );\n      setHasBeenUsed(true);\n      if (onEnable != null) {\n        onEnable();\n      }\n    }\n  };\n\n  const stopWatching = (): void => {\n    if (isGeolocationSupported && watchID != null) {\n      /**\n       * Based on reading the Geolocation API spec (\n       * https://www.w3.org/TR/2016/REC-geolocation-API-20161108/#geolocation_interface\n       * ) and trying out in practice on Chromium, one can call clearWatch\n       * regardless of permissions.\n       */\n      window.navigator.geolocation.clearWatch(watchID);\n      setWatchId(null);\n      if (onDisable != null) {\n        onDisable();\n      }\n    }\n  };\n\n  const showWarningOfDeniedGeolocation = (): void => {\n    // FIXME: Inform the user that geolocation is denied.\n    // eslint-disable-next-line no-console\n    console.log(\"Geolocation is denied. Inform the user.\");\n  };\n\n  // Inform the user once if geolocation is not supported.\n  useEffect(() => {\n    if (!isGeolocationSupported) {\n      // FIXME: Warn the user\n      // eslint-disable-next-line no-console\n      console.log(\"Geolocation is not supported. Inform the user.\");\n    }\n  }, [isGeolocationSupported]);\n\n  // Figure out the permissionState.\n  useEffect(() => {\n    if (\n      isGeolocationSupported &&\n      isPermissionsSupported &&\n      permissionState == null\n    ) {\n      checkGeolocationPermission();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Warn the user about denied permission.\n  useEffect(() => {\n    if (permissionState === \"denied\") {\n      showWarningOfDeniedGeolocation();\n      stopWatching();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [permissionState]);\n\n  /**\n   * If Permissions API is supported, only allow clicking once the\n   * PermissionState is known.\n   */\n  const isClickingAllowed = !isPermissionsSupported || permissionState != null;\n  const isGeolocationOn = watchID != null;\n\n  // Start watching on mount if asked.\n  useEffect(() => {\n    if (\n      enableOnMount &&\n      !hasBeenUsed &&\n      isGeolocationSupported &&\n      !isGeolocationOn &&\n      (!isPermissionsSupported ||\n        (permissionState != null && permissionState !== \"denied\"))\n    ) {\n      startWatching();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    enableOnMount,\n    hasBeenUsed,\n    isGeolocationSupported,\n    isGeolocationOn,\n    isPermissionsSupported,\n    permissionState,\n  ]);\n\n  const onClick: MouseEventHandler = (event) => {\n    /**\n     * Assume that Geolocation API exists.\n     *\n     * Assume either permissionState is known or the Permissios API is not\n     * supported.\n     */\n    // FIXME: Maybe find a way so this does not need to be remembered.\n    // eslint-disable-next-line no-console\n    console.assert(isGeolocationSupported);\n    // FIXME: Maybe find a way so this does not need to be remembered.\n    // FIXME: Remove these debug asserts\n    // eslint-disable-next-line no-console\n    console.assert(isClickingAllowed);\n    event.preventDefault();\n\n    if (!isGeolocationOn) {\n      if (isPermissionsSupported && permissionState === \"denied\") {\n        // Warn the user again if they press the button.\n        showWarningOfDeniedGeolocation();\n      } else {\n        startWatching();\n      }\n    } else {\n      stopWatching();\n    }\n  };\n\n  let element = null;\n  if (isGeolocationSupported) {\n    const ariaLabel = isGeolocationOn\n      ? \"Stop using my location\"\n      : \"Find my location\";\n    const buttonClassName = isGeolocationOn\n      ? \"mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate mapboxgl-ctrl-geolocate-active\"\n      : \"mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate\";\n    element = (\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group mapboxgl-ctrl-bottom-left\">\n        <button\n          type=\"button\"\n          className={buttonClassName}\n          data-testid={dataTestId}\n          aria-label={ariaLabel}\n          aria-pressed={isGeolocationOn}\n          onContextMenu={(event): void => event.preventDefault()}\n          onClick={isClickingAllowed ? onClick : undefined}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    );\n  }\n  return element;\n};\n\nexport default GeolocateControl;\n","import \"reflect-metadata\";\n\nimport { FlexibleRoadPlanner } from \"plannerjs\";\n\nimport { RoutableTileCoordinate } from \"plannerjs/lib/entities/tiles/coordinate\";\nimport TYPES from \"plannerjs/lib/types\";\nimport RoutableTileProviderDefault from \"plannerjs/lib/fetcher/tiles/RoutableTileProviderDefault\";\nimport IRoutableTileProvider from \"plannerjs/lib/fetcher/tiles/IRoutableTileProvider\";\nimport RoutingPhase from \"plannerjs/lib/enums/RoutingPhase\";\n\nimport container from \"plannerjs/lib/configs/road_planner\";\n\nconst rootUri =\n  process.env.REACT_APP_ROUTABLE_TILES?.replace(/\\/$/, \"\") ||\n  \"https://tile.olmap.org/routable-tiles\";\n\nclass RoutableTileProviderLocalhost extends RoutableTileProviderDefault {\n  // eslint-disable-next-line class-methods-use-this\n  public getIdForTileCoords(coordinate: RoutableTileCoordinate): string {\n    return `${rootUri}/${coordinate.zoom}/${coordinate.x}/${coordinate.y}`;\n  }\n}\n\ncontainer.unbind(TYPES.RoutableTileProvider);\ncontainer\n  .bind<IRoutableTileProvider>(TYPES.RoutableTileProvider)\n  .to(RoutableTileProviderLocalhost)\n  .inSingletonScope()\n  .whenTargetTagged(\"phase\", RoutingPhase.Base);\ncontainer\n  .bind<IRoutableTileProvider>(TYPES.RoutableTileProvider)\n  .to(RoutableTileProviderLocalhost)\n  .inSingletonScope()\n  .whenTargetTagged(\"phase\", RoutingPhase.Transit);\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Planner = FlexibleRoadPlanner;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  Feature,\n  FeatureCollection,\n  Geometry,\n  GeoJsonProperties,\n} from \"geojson\";\n\nimport { Planner } from \"./planner-config\";\n\nimport { ElementWithCoordinates } from \"./overpass\";\n\ninterface RouteGeometries {\n  coordinates: Array<[number, number]>;\n  obstacles: Array<[number, number]>;\n  obstacleWays: Array<Array<[number, number]>>;\n  imaginaryWays: Array<Array<[number, number]>>;\n}\n\nfunction extractGeometry(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path: any\n): RouteGeometries {\n  const coordinates = [] as Array<[number, number]>;\n  const obstacles = [] as Array<[number, number]>;\n  const obstacleWays = new Map();\n  const imaginaryWays = [] as Array<Array<[number, number]>>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path.legs[0].getSteps().forEach((step: any) => {\n    if (!step.startLocation.id && !step.stopLocation.id) {\n      imaginaryWays.push([\n        [\n          step.startLocation.longitude as number,\n          step.startLocation.latitude as number,\n        ],\n        [\n          step.stopLocation.longitude as number,\n          step.stopLocation.latitude as number,\n        ],\n      ]);\n      return; // guessed segment\n    }\n    const node = step.stopLocation;\n    if (\n      path.context[step.through]?.definedTags[\n        \"https://w3id.org/openstreetmap/terms#highway\"\n      ] === \"https://w3id.org/openstreetmap/terms#Steps\"\n    ) {\n      if (!obstacleWays.has(step.through)) {\n        obstacleWays.set(step.through, []);\n      }\n      obstacleWays\n        .get(step.through)\n        .push(\n          [\n            step.startLocation.longitude as number,\n            step.startLocation.latitude as number,\n          ],\n          [\n            step.stopLocation.longitude as number,\n            step.stopLocation.latitude as number,\n          ]\n        );\n    }\n    if (node.definedTags?.[\"https://w3id.org/openstreetmap/terms#barrier\"]) {\n      // eslint-disable-next-line no-console\n      console.log(\n        step.through,\n        node.definedTags[\n          \"https://w3id.org/openstreetmap/terms#barrier\"\n        ].replace(/^.*#/, \"\"),\n        node.id,\n        node.definedTags,\n        node.freeformTags\n      );\n      obstacles.push([node.longitude as number, node.latitude as number]);\n    }\n    coordinates.push([\n      step.startLocation.longitude as number,\n      step.startLocation.latitude as number,\n    ]);\n    coordinates.push([\n      step.stopLocation.longitude as number,\n      step.stopLocation.latitude as number,\n    ]);\n  });\n  return {\n    coordinates,\n    obstacles,\n    obstacleWays: Array.from(obstacleWays.values()),\n    imaginaryWays,\n  };\n}\n\nexport function geometryToGeoJSON(\n  origin?: [number, number],\n  targets?: Array<ElementWithCoordinates>,\n  entrances?: Array<ElementWithCoordinates>,\n  routeGeometries?: RouteGeometries\n): FeatureCollection {\n  const features = [] as Array<Feature<Geometry, GeoJsonProperties>>;\n  if (origin) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [origin[1], origin[0]],\n      },\n      properties: {\n        color: \"#00afff\",\n      },\n    });\n  }\n  if (targets) {\n    targets.forEach((target) => {\n      features.push({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [target.lon, target.lat],\n        },\n        properties: {\n          color: \"#64be14\",\n        },\n      });\n    });\n  }\n  if (entrances) {\n    entrances.forEach((entrance) => {\n      features.push({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [entrance.lon, entrance.lat],\n        },\n        properties: {\n          color: \"#00ffff\",\n          ref: entrance.tags?.[\"ref\"] || entrance.tags?.[\"addr:unit\"],\n          opacity: 0,\n        },\n      });\n    });\n  }\n  if (routeGeometries?.coordinates) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"LineString\",\n        coordinates: routeGeometries.coordinates,\n      },\n      properties: {\n        color: \"#000\",\n      },\n    });\n  }\n  if (routeGeometries?.obstacleWays) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"MultiLineString\",\n        coordinates: routeGeometries.obstacleWays,\n      },\n      properties: {\n        color: \"#dc0451\",\n        opacity: 1,\n      },\n    });\n  }\n  if (routeGeometries?.imaginaryWays) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"MultiLineString\",\n        coordinates: routeGeometries.imaginaryWays,\n      },\n      properties: {\n        color: \"#000\",\n        opacity: 0.25,\n      },\n    });\n  }\n  if (routeGeometries?.obstacles) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"MultiPoint\",\n        coordinates: routeGeometries.obstacles,\n      },\n      properties: {\n        color: \"#dc0451\",\n        ref: \"!\",\n      },\n    });\n  }\n  return {\n    type: \"FeatureCollection\",\n    features,\n  };\n}\n\nexport default function calculatePlan(\n  origin: [number, number],\n  targets: Array<ElementWithCoordinates>,\n  callback: (f: FeatureCollection) => void\n): void {\n  targets.forEach((target) => {\n    const planner = new Planner();\n    // XXX setProfileID requires URL to start with scheme, so guess\n    const protocol = process.env.NODE_ENV === \"production\" ? \"https\" : \"http\";\n    planner\n      .setProfileID(`${protocol}://${process.env.PUBLIC_URL}/delivery.json`)\n      .query({\n        from: { latitude: origin[0], longitude: origin[1] },\n        to: { latitude: target.lat, longitude: target.lon },\n      })\n      .take(1)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .on(\"data\", async (path: any) => {\n        const completePath = await planner.completePath(path);\n        // eslint-disable-next-line no-console\n        console.log(\"Plan\", completePath, \"from\", origin, \"to\", target);\n        const routeGeometries = extractGeometry(completePath);\n        const geoJSON = geometryToGeoJSON(\n          origin,\n          [target],\n          undefined,\n          routeGeometries\n        );\n        callback(geoJSON);\n      });\n  });\n}\n","export interface OverpassResponse {\n  version: number;\n  generator: string;\n  osm3s: Osm3S;\n  elements: Element[];\n}\n\nexport interface Osm3S {\n  timestamp_osm_base: Date;\n  copyright: string;\n}\n\nexport type Element =\n  | ElementWithCoordinates\n  | (ElementCore & Partial<Coordinates>);\n\nexport type ElementWithCoordinates = ElementCore & Coordinates;\n\ninterface ElementCore {\n  type: string;\n  id: number;\n  tags?: Tags;\n}\n\nexport interface Coordinates {\n  lat: number;\n  lon: number;\n}\n\nexport interface Tags {\n  entrance?: string;\n  operator?: string;\n  ref?: string;\n  \"addr:unit\"?: string;\n}\n\nconst buildEntranceQuery = (lat: number, lon: number): string => `\n  [out:json][timeout:25];\n  (\n    relation(around:10, ${lat}, ${lon})[building];\n    way(r);\n    way(around:10, ${lat}, ${lon})[building];\n  )->.b;\n  // gather results\n  (\n    node(w.b)[entrance];\n  );\n  // print results\n  out body;\n  >;\n  out skel qt;\n`;\n\nexport const queryEntrances = (\n  target: ElementWithCoordinates\n): Promise<ElementWithCoordinates[]> => {\n  const url = new URL(\"https://overpass-api.de/api/interpreter\");\n  url.searchParams.append(\"data\", buildEntranceQuery(target.lat, target.lon));\n  return fetch(url.toString()).then((response) =>\n    response.json().then((body: OverpassResponse) => {\n      const targets = body.elements.filter(\n        (element) =>\n          element.type === \"node\" &&\n          \"lat\" in element &&\n          element.lat != null &&\n          \"lon\" in element &&\n          element.lon != null &&\n          element.tags &&\n          element.tags.entrance\n      );\n      // FIXME: How to make the compiler deduce this by itself from above?\n      // For example, see https://github.com/Microsoft/TypeScript/issues/16069\n      return targets as ElementWithCoordinates[];\n    })\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { match } from \"react-router-dom\";\nimport MapGL, { Source, Layer, Marker } from \"@urbica/react-map-gl\";\nimport { WebMercatorViewport } from \"viewport-mercator-project\";\nimport type { WebMercatorViewportOptions } from \"viewport-mercator-project\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\nimport { ReactAutosuggestGeocoder } from \"react-autosuggest-geocoder\";\n\nimport {\n  routePointLayer,\n  routePointSymbolLayer,\n  routeLineLayer,\n  allEntrancesLayer,\n  allEntrancesSymbolLayer,\n} from \"./map-style\";\nimport Pin, { pinAsSVG } from \"./components/Pin\";\nimport UserPosition from \"./components/UserPosition\";\nimport GeolocateControl from \"./components/GeolocateControl\";\nimport calculatePlan, { geometryToGeoJSON } from \"./planner\";\nimport { queryEntrances, ElementWithCoordinates } from \"./overpass\";\nimport { addImageSVG } from \"./mapbox-utils\";\nimport \"./App.css\";\nimport \"./components/PinMarker.css\";\n\ninterface State {\n  viewport: WebMercatorViewportOptions;\n  origin: [number, number];\n  destination: ElementWithCoordinates;\n  entrances: Array<ElementWithCoordinates>;\n  route: FeatureCollection;\n  isGeolocating: boolean;\n  geolocationTimestamp: number | null;\n  geolocationPosition: [number, number] | null;\n}\n\nconst latLngToDestination = (\n  latLng: [number, number]\n): ElementWithCoordinates => ({\n  id: -1,\n  type: \"node\",\n  lat: latLng[0],\n  lon: latLng[1],\n});\n\nconst initialOrigin: [number, number] = [60.16295, 24.93071];\nconst initialDestination: ElementWithCoordinates = latLngToDestination([\n  60.16259,\n  24.93155,\n]);\nconst initialState: State = {\n  origin: initialOrigin,\n  destination: initialDestination,\n  entrances: [],\n  route: geometryToGeoJSON(),\n  viewport: {\n    latitude: 60.163,\n    longitude: 24.931,\n    zoom: 16,\n    bearing: 0,\n    pitch: 0,\n  },\n  isGeolocating: false,\n  geolocationTimestamp: null,\n  geolocationPosition: null,\n};\n\nconst metropolitanAreaCenter = [60.17066815612902, 24.941510260105133];\n\nconst transformRequest = (originalURL: string): { url: string } => {\n  const url = originalURL.replace(\n    \"https://static.hsldev.com/mapfonts/Klokantech Noto Sans\",\n    \"https://fonts.openmaptiles.org/Klokantech Noto Sans\"\n  );\n  return { url };\n};\n\nconst parseLatLng = (text: string): [number, number] =>\n  text.split(\",\").map(Number) as [number, number];\n\nconst fitBounds = (\n  viewportOptions: WebMercatorViewportOptions,\n  latLngs: Array<[number, number]>\n): WebMercatorViewport => {\n  const viewport = new WebMercatorViewport(viewportOptions);\n  const minLng = Math.min(...latLngs.map((x) => x[1]));\n  const maxLng = Math.max(...latLngs.map((x) => x[1]));\n  const minLat = Math.min(...latLngs.map((x) => x[0]));\n  const maxLat = Math.max(...latLngs.map((x) => x[0]));\n  const padding = 20;\n  const markerSize = 50;\n  const occludedTop = 40;\n  const circleRadius = 5;\n  return viewport.fitBounds(\n    [\n      [minLng, minLat],\n      [maxLng, maxLat],\n    ],\n    {\n      padding: {\n        top: padding + occludedTop + markerSize,\n        bottom: padding + circleRadius,\n        left: padding + markerSize / 2,\n        right: padding + markerSize / 2,\n      },\n    }\n  );\n};\n\nconst App: React.FC = () => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const map = useRef<any>(null);\n\n  // Install a callback to dynamically create pin icons that our map styles use\n  useEffect(() => {\n    if (!map.current) {\n      return; // No map yet, so nothing to do\n    }\n    const mapboxgl = map.current.getMap();\n    // FIXME: Unclear why this passed type checking before.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    mapboxgl?.on(\"styleimagemissing\", ({ id: iconId }: any) => {\n      if (!iconId?.startsWith(\"icon-pin-\")) {\n        return; // We only know how to generate pin icons\n      }\n      const [, , size, fill, stroke] = iconId.split(\"-\"); // e.g. icon-pin-48-green-#fff\n      const svgData = pinAsSVG(size, `fill: ${fill}; stroke: ${stroke}`);\n      addImageSVG(mapboxgl, iconId, svgData, size);\n    });\n  }, [map]);\n\n  const urlMatch = useRouteMatch({\n    path: \"/route/:from/:to\",\n  }) as match<{ from: string; to: string }>;\n\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    /**\n     * FIXME: urbica/react-map-gl does not expose fitBounds and its viewport\n     * does not include width and height which are required by fitBounds from\n     * viewport-mercator-project. This is dirty but seems to work.\n     */\n    if (!map.current) {\n      return; // No map yet, so nothing to do\n    }\n    const width = map.current.getMap()?.getContainer()?.clientWidth;\n    const height = map.current.getMap()?.getContainer()?.clientHeight;\n    if (\n      urlMatch &&\n      width != null &&\n      width > 0 &&\n      height != null &&\n      height > 0\n    ) {\n      const origin = parseLatLng(urlMatch.params.from);\n      const destination = parseLatLng(urlMatch.params.to);\n      const extendedViewport = { ...state.viewport, width, height };\n      const viewport = fitBounds(extendedViewport, [origin, destination]);\n      setState(\n        (prevState): State => ({\n          ...prevState,\n          origin,\n          destination: latLngToDestination(destination),\n          viewport: { ...prevState.viewport, ...viewport },\n        })\n      );\n    }\n  }, [map]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const destination = [state.destination.lat, state.destination.lon];\n    const path = `/route/${state.origin}/${destination}/`;\n    if (history.location.pathname !== path) {\n      history.replace(path);\n    }\n  }, [history, state.origin, state.destination]);\n\n  useEffect(() => {\n    queryEntrances(state.destination).then((result) => {\n      setState(\n        (prevState): State => {\n          if (prevState.destination !== state.destination) {\n            return prevState;\n          }\n          const entrances = result.length ? result : [state.destination];\n\n          return {\n            ...prevState,\n            entrances,\n          };\n        }\n      );\n    });\n  }, [state.destination]);\n\n  // Set off routing calculation when inputs change; collect results in state.route\n  useEffect(() => {\n    let targets = [] as Array<ElementWithCoordinates>;\n\n    // Try to find the destination among the entrances\n    state.entrances.forEach((entrance) => {\n      if (\n        state.destination.type === entrance.type &&\n        state.destination.id === entrance.id\n      ) {\n        targets = [entrance];\n      }\n    });\n\n    // If the destination entrance wasn't found, route to all entrances\n    if (!targets.length) {\n      targets = state.entrances;\n    }\n\n    // Clear previous routing results by setting an empty result set\n    setState(\n      (prevState): State => ({\n        ...prevState,\n        route: geometryToGeoJSON(),\n      })\n    );\n\n    calculatePlan(state.origin, targets, (geojson) => {\n      setState(\n        (prevState): State => {\n          // don't use the result if the parameters changed meanwhile\n          if (\n            state.origin !== prevState.origin ||\n            state.entrances !== prevState.entrances ||\n            state.destination !== prevState.destination\n          ) {\n            return prevState;\n          }\n          const extendedGeojson = {\n            ...geojson,\n            features: geojson.features.concat(prevState.route.features),\n          };\n          return {\n            ...prevState,\n            route: extendedGeojson,\n          };\n        }\n      );\n    });\n  }, [state.origin, state.entrances]); // eslint-disable-line react-hooks/exhaustive-deps\n  // XXX: state.destination is missing above as we need to wait for state.entrances to change as well\n\n  return (\n    <div data-testid=\"app\" className=\"App\">\n      <header className=\"App-header\">\n        <h2>Gatesolve</h2>\n      </header>\n      <ReactAutosuggestGeocoder\n        url=\"https://api.digitransit.fi/geocoding/v1/\"\n        sources=\"oa,osm,nlsfi\"\n        center={{\n          latitude:\n            state.geolocationPosition?.[0] ||\n            state.origin?.[0] ||\n            state.destination?.lat ||\n            metropolitanAreaCenter[0],\n          longitude:\n            state.geolocationPosition?.[1] ||\n            state.origin?.[1] ||\n            state.destination?.lon ||\n            metropolitanAreaCenter[1],\n        }}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onSuggestionSelected={(event: any, { suggestion }: any): any => {\n          const destination = [\n            suggestion.geometry.coordinates[1],\n            suggestion.geometry.coordinates[0],\n          ] as [number, number];\n          const [type, id] = suggestion.properties.source_id.split(\":\");\n          setState(\n            (prevState): State => {\n              const viewport = fitBounds(prevState.viewport, [\n                prevState.origin,\n                destination,\n              ]);\n              return {\n                ...prevState,\n                origin: prevState.origin,\n                destination: {\n                  lat: destination[0],\n                  lon: destination[1],\n                  type,\n                  id: Number(id),\n                },\n                entrances: [],\n                viewport: { ...prevState.viewport, ...viewport },\n              };\n            }\n          );\n        }}\n      />\n      <MapGL\n        ref={map}\n        // This is according to the Get Started materials:\n        // https://uber.github.io/react-map-gl/docs/get-started/get-started/\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...state.viewport}\n        style={{ width: \"100%\", height: \"90%\" }}\n        mapStyle=\"https://raw.githubusercontent.com/HSLdevcom/hsl-map-style/master/simple-style.json\"\n        transformRequest={transformRequest}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onViewportChange={(viewport: any): void => {\n          setState((prevState): State => ({ ...prevState, viewport }));\n        }}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onHover={(event: any): void => {\n          // Inspect the topmost feature under click\n          const feature = event.features?.[0];\n          // Set cursor shape depending whether we would click an entrance\n          const cursor = feature?.properties.entrance ? \"pointer\" : \"grab\";\n          // FIXME: Better way to set the pointer shape or at least find the element\n          const mapboxOverlaysElement = document.querySelector(\n            \".overlays\"\n          ) as HTMLElement;\n          if (mapboxOverlaysElement) {\n            mapboxOverlaysElement.style.cursor = cursor;\n          }\n        }}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onClick={(event: any): void => {\n          // Inspect the topmost feature under click\n          const feature = map.current\n            ?.getMap()\n            .queryRenderedFeatures(event.point)[0];\n          setState(\n            (prevState): State => {\n              if (feature?.properties.entrance) {\n                // If an entrance was clicked, set it as the destination\n                return {\n                  ...prevState,\n                  destination: {\n                    id: feature.properties[\"@id\"],\n                    type: feature.properties[\"@type\"],\n                    lat: feature.geometry.coordinates[1],\n                    lon: feature.geometry.coordinates[0],\n                  },\n                };\n              }\n              // As a fallback, set the clicked coordinates as the destination\n              return {\n                ...prevState,\n                destination: latLngToDestination([\n                  event.lngLat.lat,\n                  event.lngLat.lng,\n                ]),\n              };\n            }\n          );\n        }}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onContextmenu={(event: any): void => {\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin: [event.lngLat.lat, event.lngLat.lng],\n            })\n          );\n        }}\n      >\n        <GeolocateControl\n          dataTestId=\"geolocate-control\"\n          enableOnMount\n          onEnable={(): void => {\n            setState((prevState) => ({ ...prevState, isGeolocating: true }));\n          }}\n          onDisable={(): void => {\n            setState((prevState) => ({\n              ...prevState,\n              isGeolocating: false,\n              geolocationPosition: null,\n            }));\n          }}\n          onGeolocate={(geolocationPosition: Position): void => {\n            setState(\n              (prevState): State => {\n                if (prevState.isGeolocating) {\n                  const update = {\n                    ...prevState,\n                    geolocationPosition: [\n                      geolocationPosition.coords.latitude,\n                      geolocationPosition.coords.longitude,\n                    ] as [number, number],\n                  };\n                  // Update the origin if time difference is large enough\n                  if (\n                    prevState.geolocationTimestamp == null ||\n                    geolocationPosition.timestamp -\n                      prevState.geolocationTimestamp >\n                      10000\n                  ) {\n                    return {\n                      ...update,\n                      origin: [\n                        geolocationPosition.coords.latitude,\n                        geolocationPosition.coords.longitude,\n                      ],\n                      geolocationTimestamp: geolocationPosition.timestamp,\n                    };\n                  }\n                  return update;\n                }\n                return prevState;\n              }\n            );\n          }}\n        />\n        {state.geolocationPosition != null && (\n          <Marker\n            offset={[-20, -20]}\n            longitude={state.geolocationPosition[1]}\n            latitude={state.geolocationPosition[0]}\n          >\n            <UserPosition dataTestId=\"user-marker\" />\n          </Marker>\n        )}\n        <Source\n          id=\"osm-qa-tiles\"\n          type=\"vector\"\n          tiles={[\"https://tile.olmap.org/osm-qa-tiles/{z}/{x}/{y}.pbf\"]}\n          minzoom={12}\n          maxzoom={12}\n        >\n          <Layer\n            source-layer=\"osm\"\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...allEntrancesLayer}\n            source=\"osm-qa-tiles\"\n          />\n          <Layer\n            source-layer=\"osm\"\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...allEntrancesSymbolLayer}\n            source=\"osm-qa-tiles\"\n          />\n        </Source>\n        <Source id=\"route\" type=\"geojson\" data={state.route}>\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routeLineLayer}\n            source=\"route\"\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointLayer}\n            source=\"route\"\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointSymbolLayer}\n            source=\"route\"\n          />\n        </Source>\n        <Marker\n          className=\"PinMarker\"\n          draggable\n          offset={[0, -22.5]}\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          onDragEnd={(lngLat: any): void => {\n            setState(\n              (prevState): State => ({\n                ...prevState,\n                origin: [lngLat.lat, lngLat.lng],\n              })\n            );\n          }}\n          longitude={state.origin[1]}\n          latitude={state.origin[0]}\n        >\n          <Pin\n            dataTestId=\"origin\"\n            style={{ fill: \"#00afff\", stroke: \"#fff\" }}\n          />\n        </Marker>\n        <Marker\n          className=\"PinMarker\"\n          draggable\n          offset={[0, -22.5]}\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          onDragEnd={(lngLat: any): void => {\n            setState(\n              (prevState): State => ({\n                ...prevState,\n                destination: latLngToDestination([lngLat.lat, lngLat.lng]),\n              })\n            );\n          }}\n          longitude={state.destination.lon}\n          latitude={state.destination.lat}\n        >\n          <Pin\n            dataTestId=\"destination\"\n            style={{ fill: \"#64be14\", stroke: \"#fff\" }}\n          />\n        </Marker>\n      </MapGL>\n    </div>\n  );\n};\n\nexport default App;\n","import { Map } from \"mapbox-gl\";\n\n// eslint-disable-next-line import/prefer-default-export\nexport const addImageSVG = (\n  mapboxgl: Map,\n  imageId: string,\n  svgData: string,\n  size: number\n): void => {\n  const ratio = window.devicePixelRatio;\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = ratio * size;\n  canvas.height = ratio * size;\n\n  const ctx = canvas.getContext(\"2d\");\n  const img = new Image(size, size);\n\n  const svgDataUrl = `data:image/svg+xml,${encodeURIComponent(svgData)}`;\n\n  img.onload = (): void => {\n    if (!ctx) {\n      throw Error(\"canvas.getContext failed\");\n    }\n\n    ctx.drawImage(img, 0, 0, ratio * size, ratio * size);\n    mapboxgl.addImage(\n      imageId,\n      ctx.getImageData(0, 0, ratio * size, ratio * size),\n      { pixelRatio: ratio }\n    );\n  };\n\n  img.src = svgDataUrl;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}