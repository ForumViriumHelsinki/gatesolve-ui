{"version":3,"sources":["logo.svg","map-style.ts","components/Pin.tsx","components/PinMarker.tsx","planner.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","routeLineLayer","id","type","paint","routePointLayer","filter","Pin","height","style","fill","stroke","viewBox","d","PinMarker","longitude","latitude","offsetLeft","offsetTop","extractGeometry","path","coordinates","legs","getSteps","forEach","step","push","startLocation","stopLocation","geometryToGeoJSON","origin","destination","features","geometry","properties","color","initialOrigin","initialDestination","initialState","route","viewport","zoom","bearing","pitch","App","useState","state","setState","useEffect","callback","planner","FlexibleTransitPlanner","query","from","to","roadNetworkOnly","take","on","a","completePath","geoJSON","calculatePlan","geojson","prevState","data-testid","className","src","logo","alt","width","mapStyle","onViewportChange","onClick","event","srcEvent","button","lngLat","onContextMenu","preventDefault","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0144358.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Expression } from \"mapbox-gl\";\n\nexport const routeLineLayer = {\n  id: \"route-line\",\n  type: \"line\",\n  paint: {\n    \"line-opacity\": 0.5,\n    \"line-width\": 5\n  }\n};\n\nexport const routePointLayer = {\n  id: \"route-point\",\n  type: \"circle\",\n  paint: {\n    \"circle-radius\": 5,\n    \"circle-color\": [\"get\", \"color\"] as Expression\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]]\n};\n","import React from \"react\";\n\nexport interface PinProps {\n  height?: string;\n  style?: React.CSSProperties;\n}\n\nconst Pin: React.SFC<PinProps> = ({\n  height = \"50\",\n  style = { fill: \"#444\", stroke: \"none\" }\n}) => {\n  const SVG_MARKUP =\n    \"M7.5 0C5.068 0 2.23 1.486 2.23 5.27c0 2.568 4.054 8.244 5.27 9.73c1.081-1.486 5.27-7.027 5.27-9.73C12.77 1.487 9.932 0 7.5 0z\";\n\n  return (\n    <svg height={height} style={style} viewBox=\"0 0 15 15\">\n      <path d={SVG_MARKUP} />\n    </svg>\n  );\n};\n\nexport default Pin;\n","import React from \"react\";\nimport { Marker } from \"react-map-gl\";\n\nimport Pin, { PinProps } from \"./Pin\";\n\nexport interface PinMarkerProps extends PinProps {\n  longitude: number;\n  latitude: number;\n}\n\nconst PinMarker: React.SFC<PinMarkerProps> = ({\n  longitude,\n  latitude,\n  // FIXME: Avoid repetition with Pin\n  height = \"50\",\n  style = { fill: \"#444\", stroke: \"none\" }\n}) => {\n  return (\n    <Marker\n      latitude={latitude}\n      longitude={longitude}\n      offsetLeft={-height / 2}\n      offsetTop={-height}\n    >\n      <Pin height={height} style={style} />\n    </Marker>\n  );\n};\n\nexport default PinMarker;\n","import { FlexibleTransitPlanner } from \"plannerjs\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractGeometry(path: any): Array<[number, number]> {\n  const coordinates = [] as Array<[number, number]>;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path.legs[0].getSteps().forEach((step: any) => {\n    coordinates.push([\n      step.startLocation.longitude as number,\n      step.startLocation.latitude as number\n    ]);\n    coordinates.push([\n      step.stopLocation.longitude as number,\n      step.stopLocation.latitude as number\n    ]);\n  });\n  return coordinates;\n}\n\nexport function geometryToGeoJSON(\n  origin: [number, number],\n  destination: [number, number],\n  coordinates: Array<[number, number]>\n): FeatureCollection {\n  return {\n    type: \"FeatureCollection\",\n    features: [\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"LineString\",\n          coordinates\n        },\n        properties: {\n          color: \"#000\"\n        }\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [origin[1], origin[0]]\n        },\n        properties: {\n          color: \"#00f\"\n        }\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [destination[1], destination[0]]\n        },\n        properties: {\n          color: \"#0f0\"\n        }\n      }\n    ]\n  };\n}\n\nexport default function calculatePlan(\n  origin: [number, number],\n  destination: [number, number],\n  callback: (f: FeatureCollection) => void\n): void {\n  const planner = new FlexibleTransitPlanner();\n  planner\n    .query({\n      from: { latitude: origin[0], longitude: origin[1] },\n      to: { latitude: destination[0], longitude: destination[1] },\n      roadNetworkOnly: true\n    })\n    .take(1)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .on(\"data\", async (path: any) => {\n      const completePath = await planner.completePath(path);\n      const geometry = extractGeometry(completePath);\n      const geoJSON = geometryToGeoJSON(origin, destination, geometry);\n      callback(geoJSON);\n    });\n}\n","import React, { useState, useEffect } from \"react\";\nimport MapGL, { Source, Layer, ViewportProps } from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\n\nimport { routePointLayer, routeLineLayer } from \"./map-style\";\nimport PinMarker from \"./components/PinMarker\";\nimport calculatePlan, { geometryToGeoJSON } from \"./planner\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\ntype State = {\n  viewport: Partial<ViewportProps>;\n  origin: [number, number];\n  destination: [number, number];\n  route: FeatureCollection;\n};\n\nconst initialOrigin = [60.17, 24.94] as [number, number];\nconst initialDestination = [60.18, 24.95] as [number, number];\nconst initialState: State = {\n  origin: initialOrigin,\n  destination: initialDestination,\n  route: geometryToGeoJSON(initialOrigin, initialDestination, []),\n  viewport: {\n    latitude: 60.17,\n    longitude: 24.94,\n    zoom: 14,\n    bearing: 0,\n    pitch: 0\n  }\n};\n\nconst App: React.FC = () => {\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    calculatePlan(state.origin, state.destination, geojson => {\n      setState(\n        (prevState): State => {\n          // don't use the result if the parameters changed meanwhile\n          if (\n            state.origin !== prevState.origin ||\n            state.destination !== prevState.destination\n          ) {\n            return prevState;\n          }\n          return {\n            ...prevState,\n            route: geojson\n          };\n        }\n      );\n    });\n  }, [state.origin, state.destination]);\n\n  return (\n    <div data-testid=\"app\" className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <MapGL\n        // This is according to the Get Started materials:\n        // https://uber.github.io/react-map-gl/docs/get-started/get-started/\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...state.viewport}\n        width=\"100vw\"\n        height=\"90vh\"\n        mapStyle=\"https://raw.githubusercontent.com/HSLdevcom/hsl-map-style/master/simple-style.json\"\n        onViewportChange={(viewport): void =>\n          setState((prevState): State => ({ ...prevState, viewport }))\n        }\n        onClick={(event): void => {\n          // Filter out events not caused by left mouse button\n          if (event.srcEvent.button !== 0) return;\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              destination: [event.lngLat[1], event.lngLat[0]]\n            })\n          );\n        }}\n        onContextMenu={(event): void => {\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin: [event.lngLat[1], event.lngLat[0]]\n            })\n          );\n          event.srcEvent.preventDefault();\n        }}\n      >\n        <Source type=\"geojson\" data={state.route}>\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routeLineLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointLayer}\n          />\n        </Source>\n        <PinMarker\n          longitude={state.origin[1]}\n          latitude={state.origin[0]}\n          style={{ fill: \"#00f\" }}\n        />\n        <PinMarker\n          longitude={state.destination[1]}\n          latitude={state.destination[0]}\n          style={{ fill: \"#0f0\" }}\n        />\n      </MapGL>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}