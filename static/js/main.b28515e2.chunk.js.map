{"version":3,"sources":["map-style.ts","components/Pin.tsx","components/PinMarker.tsx","planner-config.ts","planner.ts","overpass.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["routeLineLayer","id","type","paint","routePointLayer","filter","routePointSymbolLayer","layout","Pin","height","style","fill","stroke","dataTestId","data-testid","viewBox","d","PinMarker","pin","otherPinProps","marker","offsetLeft","offsetTop","rootUri","process","REACT_APP_ROUTABLE_TILES","replace","RoutableTileProviderLocalhost","coordinate","zoom","x","y","RoutableTileProviderDefault","container","unbind","TYPES","RoutableTileProvider","bind","to","inSingletonScope","whenTargetTagged","RoutingPhase","Base","Transit","Planner","FlexibleRoadPlanner","extractGeometry","path","coordinates","obstacles","obstacleWays","Map","legs","getSteps","forEach","step","node","stopLocation","context","through","definedTags","has","set","get","push","startLocation","longitude","latitude","console","log","freeformTags","Array","from","values","geometryToGeoJSON","origin","destination","destinationRef","features","geometry","properties","color","opacity","ref","calculatePlan","callback","latLng","lat","lon","url","URL","searchParams","append","fetch","toString","then","response","json","body","elements","element","tags","entrance","queryEntrances","entrances","length","targets","target","planner","query","take","on","a","completePath","geoJSON","initialOrigin","initialDestination","initialState","route","viewport","bearing","pitch","transformRequest","originalURL","Error","parseLatLng","text","split","map","Number","fitBounds","viewportProps","latLngs","WebMercatorViewport","minLng","Math","min","maxLng","max","minLat","maxLat","padding","top","bottom","left","right","App","useRef","mapViewport","urlMatch","useRouteMatch","useState","state","setState","useEffect","params","current","prevState","history","useHistory","location","pathname","geojson","className","sources","onSuggestionSelected","event","suggestion","width","mapStyle","onViewportChange","onClick","srcEvent","button","lngLat","onContextMenu","preventDefault","data","draggable","onDragEnd","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b28515e2.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Expression } from \"mapbox-gl\";\n\nexport const routeLineLayer = {\n  id: \"route-line\",\n  type: \"line\",\n  paint: {\n    \"line-opacity\": [\"coalesce\", [\"get\", \"opacity\"], 0.5] as Expression,\n    \"line-width\": 5,\n    \"line-color\": [\"get\", \"color\"] as Expression,\n  },\n};\n\nexport const routePointLayer = {\n  id: \"route-point\",\n  type: \"circle\",\n  paint: {\n    \"circle-radius\": 5,\n    \"circle-color\": [\"get\", \"color\"] as Expression,\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n\nexport const routePointSymbolLayer = {\n  id: \"route-point-symbol\",\n  type: \"symbol\",\n  paint: {\n    \"text-color\": \"#000\",\n    \"text-halo-color\": \"#fff\",\n    \"text-halo-width\": 3,\n  },\n  layout: {\n    \"text-field\": [\"get\", \"ref\"] as Expression,\n    \"text-anchor\": (\"center\" as unknown) as Expression,\n    \"text-font\": [\"Klokantech Noto Sans Regular\"],\n    \"text-size\": 24,\n    \"text-offset\": [0, -0.05],\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n","import React from \"react\";\n\nexport interface PinProps {\n  height?: string;\n  style?: React.CSSProperties;\n  dataTestId?: string;\n}\n\nconst Pin: React.FC<PinProps> = ({\n  height = \"50\",\n  style = { fill: \"#444\", stroke: \"none\" },\n  dataTestId,\n}) => {\n  const SVG_MARKUP =\n    \"M7.5 0C5.068 0 2.23 1.486 2.23 5.27c0 2.568 4.054 8.244 5.27 9.73c1.081-1.486 5.27-7.027 5.27-9.73C12.77 1.487 9.932 0 7.5 0z\";\n\n  return (\n    <svg\n      data-testid={dataTestId}\n      height={height}\n      style={style}\n      viewBox=\"-1 -1 17 17\"\n    >\n      <path d={SVG_MARKUP} />\n    </svg>\n  );\n};\n\nexport default Pin;\n","import React from \"react\";\nimport { Marker, MarkerProps } from \"react-map-gl\";\n\nimport Pin, { PinProps } from \"./Pin\";\n\nexport interface PinMarkerProps {\n  marker: MarkerProps;\n  pin: PinProps;\n}\n\nconst PinMarker: React.FC<PinMarkerProps> = ({\n  pin: { height = \"50\", ...otherPinProps },\n  marker,\n}) => {\n  return (\n    <Marker\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...marker}\n      offsetLeft={-height / 2}\n      offsetTop={-height}\n    >\n      <Pin\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...{ height, ...otherPinProps }}\n      />\n    </Marker>\n  );\n};\n\nexport default PinMarker;\n","import \"reflect-metadata\";\n\nimport { FlexibleRoadPlanner } from \"plannerjs\";\n\nimport { RoutableTileCoordinate } from \"plannerjs/lib/entities/tiles/coordinate\";\nimport TYPES from \"plannerjs/lib/types\";\nimport RoutableTileProviderDefault from \"plannerjs/lib/fetcher/tiles/RoutableTileProviderDefault\";\nimport IRoutableTileProvider from \"plannerjs/lib/fetcher/tiles/IRoutableTileProvider\";\nimport RoutingPhase from \"plannerjs/lib/enums/RoutingPhase\";\n\nimport container from \"plannerjs/lib/configs/road_planner\";\n\nconst rootUri = process.env.REACT_APP_ROUTABLE_TILES?.replace(/\\/$/, \"\");\n\nclass RoutableTileProviderLocalhost extends RoutableTileProviderDefault {\n  // eslint-disable-next-line class-methods-use-this\n  public getIdForTileCoords(coordinate: RoutableTileCoordinate): string {\n    return `${rootUri}/${coordinate.zoom}/${coordinate.x}/${coordinate.y}`;\n  }\n}\n\nif (process.env.REACT_APP_ROUTABLE_TILES) {\n  container.unbind(TYPES.RoutableTileProvider);\n  container\n    .bind<IRoutableTileProvider>(TYPES.RoutableTileProvider)\n    .to(RoutableTileProviderLocalhost)\n    .inSingletonScope()\n    .whenTargetTagged(\"phase\", RoutingPhase.Base);\n  container\n    .bind<IRoutableTileProvider>(TYPES.RoutableTileProvider)\n    .to(RoutableTileProviderLocalhost)\n    .inSingletonScope()\n    .whenTargetTagged(\"phase\", RoutingPhase.Transit);\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Planner = FlexibleRoadPlanner;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\n\nimport { Planner } from \"./planner-config\";\n\nimport { queryEntrances } from \"./overpass\";\n\nfunction extractGeometry(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path: any\n): [\n  Array<[number, number]>,\n  Array<[number, number]>,\n  Array<Array<[number, number]>>\n] {\n  const coordinates = [] as Array<[number, number]>;\n  const obstacles = [] as Array<[number, number]>;\n  const obstacleWays = new Map();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path.legs[0].getSteps().forEach((step: any) => {\n    const node = step.stopLocation;\n    if (\n      path.context[step.through]?.definedTags[\n        \"https://w3id.org/openstreetmap/terms#highway\"\n      ] === \"https://w3id.org/openstreetmap/terms#Steps\"\n    ) {\n      if (!obstacleWays.has(step.through)) {\n        obstacleWays.set(step.through, []);\n      }\n      obstacleWays\n        .get(step.through)\n        .push(\n          [\n            step.startLocation.longitude as number,\n            step.startLocation.latitude as number,\n          ],\n          [\n            step.stopLocation.longitude as number,\n            step.stopLocation.latitude as number,\n          ]\n        );\n    }\n    if (node.definedTags?.[\"https://w3id.org/openstreetmap/terms#barrier\"]) {\n      // eslint-disable-next-line no-console\n      console.log(\n        step.through,\n        node.definedTags[\n          \"https://w3id.org/openstreetmap/terms#barrier\"\n        ].replace(/^.*#/, \"\"),\n        node.id,\n        node.definedTags,\n        node.freeformTags\n      );\n      obstacles.push([node.longitude as number, node.latitude as number]);\n    }\n    coordinates.push([\n      step.startLocation.longitude as number,\n      step.startLocation.latitude as number,\n    ]);\n    coordinates.push([\n      step.stopLocation.longitude as number,\n      step.stopLocation.latitude as number,\n    ]);\n  });\n  return [coordinates, obstacles, Array.from(obstacleWays.values())];\n}\n\nexport function geometryToGeoJSON(\n  origin: [number, number],\n  destination: [number, number],\n  destinationRef?: string,\n  coordinates?: Array<[number, number]>,\n  obstacles?: Array<[number, number]>,\n  obstacleWays?: Array<Array<[number, number]>>\n): FeatureCollection {\n  return {\n    type: \"FeatureCollection\",\n    features: [\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"LineString\",\n          coordinates: coordinates || [],\n        },\n        properties: {\n          color: \"#000\",\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: obstacleWays || [],\n        },\n        properties: {\n          color: \"#dc0451\",\n          opacity: 1,\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"MultiPoint\",\n          coordinates: obstacles || [],\n        },\n        properties: {\n          color: \"#dc0451\",\n          ref: \"!\",\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [origin[1], origin[0]],\n        },\n        properties: {\n          color: \"#00afff\",\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [destination[1], destination[0]],\n        },\n        properties: {\n          color: \"#64be14\",\n          ref: destinationRef,\n        },\n      },\n    ],\n  };\n}\n\nexport default function calculatePlan(\n  origin: [number, number],\n  destination: [number, number],\n  callback: (f: FeatureCollection) => void\n): void {\n  queryEntrances(destination)\n    .then((entrances) => {\n      if (!entrances.length) {\n        return [\n          { id: -1, type: \"node\", lat: destination[0], lon: destination[1] },\n        ];\n      }\n      return entrances;\n    })\n    .then((targets) => {\n      targets.forEach((target) => {\n        const planner = new Planner();\n        planner\n          .query({\n            from: { latitude: origin[0], longitude: origin[1] },\n            to: { latitude: target.lat, longitude: target.lon },\n          })\n          .take(1)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .on(\"data\", async (path: any) => {\n            const completePath = await planner.completePath(path);\n            // eslint-disable-next-line no-console\n            console.log(\"Plan\", completePath, \"from\", origin, \"to\", target);\n            const [geometry, obstacles, obstacleWays] = extractGeometry(\n              completePath\n            );\n            const geoJSON = geometryToGeoJSON(\n              origin,\n              [target.lat, target.lon],\n              target.tags?.[\"ref\"] || target.tags?.[\"addr:unit\"],\n              geometry,\n              obstacles,\n              obstacleWays\n            );\n            callback(geoJSON);\n          });\n      });\n    });\n}\n","export interface OverpassResponse {\n  version: number;\n  generator: string;\n  osm3s: Osm3S;\n  elements: Element[];\n}\n\nexport interface Osm3S {\n  timestamp_osm_base: Date;\n  copyright: string;\n}\n\nexport type Element =\n  | ElementWithCoordinates\n  | (ElementCore & Partial<Coordinates>);\n\ntype ElementWithCoordinates = ElementCore & Coordinates;\n\ninterface ElementCore {\n  type: string;\n  id: number;\n  tags?: Tags;\n}\n\nexport interface Coordinates {\n  lat: number;\n  lon: number;\n}\n\nexport interface Tags {\n  entrance?: string;\n  operator?: string;\n  ref?: string;\n  \"addr:unit\"?: string;\n}\n\nconst buildEntranceQuery = (lat: number, lon: number): string => `\n  [out:json][timeout:25];\n  (\n    relation(around:10, ${lat}, ${lon})[building];\n    way(r);\n    way(around:10, ${lat}, ${lon})[building];\n  )->.b;\n  // gather results\n  (\n    node(w.b)[entrance];\n  );\n  // print results\n  out body;\n  >;\n  out skel qt;\n`;\n\nexport const queryEntrances = (\n  latLng: [number, number]\n): Promise<ElementWithCoordinates[]> => {\n  const url = new URL(\"https://overpass-api.de/api/interpreter\");\n  url.searchParams.append(\"data\", buildEntranceQuery(latLng[0], latLng[1]));\n  return fetch(url.toString()).then((response) =>\n    response.json().then((body: OverpassResponse) => {\n      const targets = body.elements.filter(\n        (element) =>\n          element.type === \"node\" &&\n          \"lat\" in element &&\n          element.lat != null &&\n          \"lon\" in element &&\n          element.lon != null &&\n          element.tags &&\n          element.tags.entrance\n      );\n      // FIXME: How to make the compiler deduce this by itself from above?\n      // For example, see https://github.com/Microsoft/TypeScript/issues/16069\n      return targets as ElementWithCoordinates[];\n    })\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { match } from \"react-router-dom\";\nimport MapGL, {\n  Source,\n  Layer,\n  WebMercatorViewport,\n  ViewportProps,\n  MapRequest,\n} from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\nimport { ReactAutosuggestGeocoder } from \"react-autosuggest-geocoder\";\n\nimport {\n  routePointLayer,\n  routePointSymbolLayer,\n  routeLineLayer,\n} from \"./map-style\";\nimport PinMarker from \"./components/PinMarker\";\nimport calculatePlan, { geometryToGeoJSON } from \"./planner\";\nimport \"./App.css\";\n\ninterface State {\n  viewport: Partial<ViewportProps>;\n  origin: [number, number];\n  destination: [number, number];\n  route: FeatureCollection;\n}\n\nconst initialOrigin: [number, number] = [60.16295, 24.93071];\nconst initialDestination: [number, number] = [60.16259, 24.93155];\nconst initialState: State = {\n  origin: initialOrigin,\n  destination: initialDestination,\n  route: geometryToGeoJSON(initialOrigin, initialDestination),\n  viewport: {\n    latitude: 60.163,\n    longitude: 24.931,\n    zoom: 16,\n    bearing: 0,\n    pitch: 0,\n  },\n};\n\nconst transformRequest = (originalURL?: string): MapRequest => {\n  if (!originalURL) {\n    throw Error(\"This cannot happen as URL isn't actually optional.\");\n  }\n  const url = originalURL.replace(\n    \"https://static.hsldev.com/mapfonts/Klokantech Noto Sans\",\n    \"https://fonts.openmaptiles.org/Klokantech Noto Sans\"\n  );\n  return { url };\n};\n\nconst parseLatLng = (text: string): [number, number] =>\n  text.split(\",\").map(Number) as [number, number];\n\nconst fitBounds = (\n  viewportProps: Partial<ViewportProps>,\n  latLngs: Array<[number, number]>\n): Partial<ViewportProps> => {\n  const viewport = new WebMercatorViewport(viewportProps);\n  const minLng = Math.min(...latLngs.map((x) => x[1]));\n  const maxLng = Math.max(...latLngs.map((x) => x[1]));\n  const minLat = Math.min(...latLngs.map((x) => x[0]));\n  const maxLat = Math.max(...latLngs.map((x) => x[0]));\n  const padding = 20;\n  const markerSize = 50;\n  const occludedTop = 40;\n  const circleRadius = 5;\n  return viewport.fitBounds(\n    [\n      [minLng, minLat],\n      [maxLng, maxLat],\n    ],\n    {\n      padding: {\n        top: padding + occludedTop + markerSize,\n        bottom: padding + circleRadius,\n        left: padding + markerSize / 2,\n        right: padding + markerSize / 2,\n      },\n    }\n  );\n};\n\nconst App: React.FC = () => {\n  const map = useRef<MapGL>(null);\n  const mapViewport = useRef<Partial<ViewportProps>>({});\n\n  const urlMatch =\n    useRouteMatch({\n      path: \"/route/:from/:to\",\n    }) as match<{ from: string; to: string }>;\n\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    if (urlMatch) {\n      const origin = parseLatLng(urlMatch.params.from);\n      const destination = parseLatLng(urlMatch.params.to);\n      const viewport = fitBounds(mapViewport.current, [origin, destination]);\n      setState(\n        (prevState): State => ({\n          ...prevState,\n          origin,\n          destination,\n          viewport: { ...mapViewport.current, ...viewport },\n        })\n      );\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (\n      history.location.pathname !==\n      `/route/${state.origin}/${state.destination}/`\n    ) {\n      history.replace(`/route/${state.origin}/${state.destination}/`);\n    }\n  }, [history, state.origin, state.destination]);\n\n  useEffect(() => {\n    setState(\n      (prevState): State => ({\n        ...prevState,\n        route: geometryToGeoJSON(state.origin, state.destination),\n      })\n    );\n    calculatePlan(state.origin, state.destination, (geojson) => {\n      setState(\n        (prevState): State => {\n          // don't use the result if the parameters changed meanwhile\n          if (\n            state.origin !== prevState.origin ||\n            state.destination !== prevState.destination\n          ) {\n            return prevState;\n          }\n          geojson.features.push(...prevState.route.features);\n          return {\n            ...prevState,\n            route: geojson,\n          };\n        }\n      );\n    });\n  }, [state.origin, state.destination]);\n\n  return (\n    <div data-testid=\"app\" className=\"App\">\n      <header className=\"App-header\">\n        <h2>Gatesolve</h2>\n      </header>\n      <ReactAutosuggestGeocoder\n        url=\"https://api.digitransit.fi/geocoding/v1/\"\n        sources=\"oa,osm,nlsfi\"\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onSuggestionSelected={(event: any, { suggestion }: any): any => {\n          const { origin } = state;\n          const destination =\n            [\n              suggestion.geometry.coordinates[1],\n              suggestion.geometry.coordinates[0],\n            ] as [number, number];\n          const viewport = fitBounds(mapViewport.current, [\n            origin,\n            destination,\n          ]);\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin,\n              destination,\n              viewport: { ...mapViewport.current, ...viewport },\n            })\n          );\n        }}\n      />\n      <MapGL\n        ref={map}\n        // This is according to the Get Started materials:\n        // https://uber.github.io/react-map-gl/docs/get-started/get-started/\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...state.viewport}\n        width=\"100%\"\n        height=\"90%\"\n        mapStyle=\"https://raw.githubusercontent.com/HSLdevcom/hsl-map-style/master/simple-style.json\"\n        transformRequest={transformRequest}\n        onViewportChange={(viewport): void => {\n          mapViewport.current = viewport;\n          setState((prevState): State => ({ ...prevState, viewport }));\n        }}\n        onClick={(event): void => {\n          // Filter out events not caused by left mouse button\n          if (event.srcEvent.button !== 0) return;\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              destination: [event.lngLat[1], event.lngLat[0]],\n            })\n          );\n        }}\n        onContextMenu={(event): void => {\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin: [event.lngLat[1], event.lngLat[0]],\n            })\n          );\n          event.srcEvent.preventDefault();\n        }}\n      >\n        <Source type=\"geojson\" data={state.route}>\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routeLineLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointSymbolLayer}\n          />\n        </Source>\n        <PinMarker\n          marker={{\n            draggable: true,\n            onDragEnd: (event): void => {\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  origin: [event.lngLat[1], event.lngLat[0]],\n                })\n              );\n            },\n            longitude: state.origin[1],\n            latitude: state.origin[0],\n          }}\n          pin={{\n            dataTestId: \"origin\",\n            style: { fill: \"#00afff\", stroke: \"#fff\" },\n          }}\n        />\n        <PinMarker\n          marker={{\n            draggable: true,\n            onDragEnd: (event): void => {\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  destination: [event.lngLat[1], event.lngLat[0]],\n                })\n              );\n            },\n            longitude: state.destination[1],\n            latitude: state.destination[0],\n          }}\n          pin={{\n            dataTestId: \"destination\",\n            style: { fill: \"#64be14\", stroke: \"#fff\" },\n          }}\n        />\n      </MapGL>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}