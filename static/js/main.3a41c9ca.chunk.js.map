{"version":3,"sources":["map-style.ts","components/Pin.tsx","components/PinMarker.tsx","planner.ts","overpass.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["routeLineLayer","id","type","paint","routePointLayer","filter","routePointSymbolLayer","layout","Pin","height","style","fill","stroke","viewBox","d","PinMarker","pin","otherPinProps","marker","offsetLeft","offsetTop","extractGeometry","path","coordinates","obstacles","obstacleWays","Map","legs","getSteps","forEach","step","node","stopLocation","context","through","definedTags","has","set","get","push","startLocation","longitude","latitude","console","log","replace","freeformTags","Array","from","values","geometryToGeoJSON","origin","destination","destinationRef","features","geometry","properties","color","opacity","ref","calculatePlan","callback","latLng","lat","lon","url","URL","searchParams","append","fetch","toString","then","response","json","body","elements","element","tags","entrance","queryEntrances","entrances","length","targets","target","planner","FlexibleRoadPlanner","query","to","roadNetworkOnly","take","on","a","completePath","geoJSON","initialOrigin","initialDestination","initialState","route","viewport","zoom","bearing","pitch","transformRequest","originalURL","Error","App","useState","state","setState","useEffect","prevState","geojson","data-testid","className","width","mapStyle","onViewportChange","onClick","event","srcEvent","button","lngLat","onContextMenu","preventDefault","data","draggable","onDragEnd","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a41c9ca.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Expression } from \"mapbox-gl\";\n\nexport const routeLineLayer = {\n  id: \"route-line\",\n  type: \"line\",\n  paint: {\n    \"line-opacity\": [\"coalesce\", [\"get\", \"opacity\"], 0.5] as Expression,\n    \"line-width\": 5,\n    \"line-color\": [\"get\", \"color\"] as Expression,\n  },\n};\n\nexport const routePointLayer = {\n  id: \"route-point\",\n  type: \"circle\",\n  paint: {\n    \"circle-radius\": 5,\n    \"circle-color\": [\"get\", \"color\"] as Expression,\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n\nexport const routePointSymbolLayer = {\n  id: \"route-point-symbol\",\n  type: \"symbol\",\n  paint: {\n    \"text-color\": \"#000\",\n    \"text-halo-color\": \"#fff\",\n    \"text-halo-width\": 1,\n  },\n  layout: {\n    \"text-field\": [\"get\", \"ref\"] as Expression,\n    \"text-anchor\": (\"center\" as unknown) as Expression,\n    \"text-font\": [\"Klokantech Noto Sans Regular\"],\n    \"text-size\": 8,\n    \"text-offset\": [0, -0.05],\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n","import React from \"react\";\n\nexport interface PinProps {\n  height?: string;\n  style?: React.CSSProperties;\n}\n\nconst Pin: React.FC<PinProps> = ({\n  height = \"50\",\n  style = { fill: \"#444\", stroke: \"none\" },\n}) => {\n  const SVG_MARKUP =\n    \"M7.5 0C5.068 0 2.23 1.486 2.23 5.27c0 2.568 4.054 8.244 5.27 9.73c1.081-1.486 5.27-7.027 5.27-9.73C12.77 1.487 9.932 0 7.5 0z\";\n\n  return (\n    <svg height={height} style={style} viewBox=\"-1 -1 17 17\">\n      <path d={SVG_MARKUP} />\n    </svg>\n  );\n};\n\nexport default Pin;\n","import React from \"react\";\nimport { Marker, MarkerProps } from \"react-map-gl\";\n\nimport Pin, { PinProps } from \"./Pin\";\n\nexport interface PinMarkerProps {\n  marker: MarkerProps;\n  pin: PinProps;\n}\n\nconst PinMarker: React.FC<PinMarkerProps> = ({\n  pin: { height = \"50\", ...otherPinProps },\n  marker,\n}) => {\n  return (\n    <Marker\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...marker}\n      offsetLeft={-height / 2}\n      offsetTop={-height}\n    >\n      <Pin\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...{ height, ...otherPinProps }}\n      />\n    </Marker>\n  );\n};\n\nexport default PinMarker;\n","import { FlexibleRoadPlanner } from \"plannerjs\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\n\nimport { queryEntrances } from \"./overpass\";\n\nfunction extractGeometry(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path: any\n): [\n  Array<[number, number]>,\n  Array<[number, number]>,\n  Array<Array<[number, number]>>\n] {\n  const coordinates = [] as Array<[number, number]>;\n  const obstacles = [] as Array<[number, number]>;\n  const obstacleWays = new Map();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path.legs[0].getSteps().forEach((step: any) => {\n    const node = step.stopLocation;\n    if (\n      path.context[step.through]?.definedTags[\n        \"https://w3id.org/openstreetmap/terms#highway\"\n      ] === \"https://w3id.org/openstreetmap/terms#Steps\"\n    ) {\n      if (!obstacleWays.has(step.through)) {\n        obstacleWays.set(step.through, []);\n      }\n      obstacleWays\n        .get(step.through)\n        .push(\n          [\n            step.startLocation.longitude as number,\n            step.startLocation.latitude as number,\n          ],\n          [\n            step.stopLocation.longitude as number,\n            step.stopLocation.latitude as number,\n          ]\n        );\n    }\n    if (node.definedTags?.[\"https://w3id.org/openstreetmap/terms#barrier\"]) {\n      // eslint-disable-next-line no-console\n      console.log(\n        step.through,\n        node.definedTags[\n          \"https://w3id.org/openstreetmap/terms#barrier\"\n        ].replace(/^.*#/, \"\"),\n        node.id,\n        node.definedTags,\n        node.freeformTags\n      );\n      obstacles.push([node.longitude as number, node.latitude as number]);\n    }\n    coordinates.push([\n      step.startLocation.longitude as number,\n      step.startLocation.latitude as number,\n    ]);\n    coordinates.push([\n      step.stopLocation.longitude as number,\n      step.stopLocation.latitude as number,\n    ]);\n  });\n  return [coordinates, obstacles, Array.from(obstacleWays.values())];\n}\n\nexport function geometryToGeoJSON(\n  origin: [number, number],\n  destination: [number, number],\n  destinationRef?: string,\n  coordinates?: Array<[number, number]>,\n  obstacles?: Array<[number, number]>,\n  obstacleWays?: Array<Array<[number, number]>>\n): FeatureCollection {\n  return {\n    type: \"FeatureCollection\",\n    features: [\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"LineString\",\n          coordinates: coordinates || [],\n        },\n        properties: {\n          color: \"#000\",\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: obstacleWays || [],\n        },\n        properties: {\n          color: \"#dc0451\",\n          opacity: 1,\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"MultiPoint\",\n          coordinates: obstacles || [],\n        },\n        properties: {\n          color: \"#dc0451\",\n          ref: \"!\",\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [origin[1], origin[0]],\n        },\n        properties: {\n          color: \"#00afff\",\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [destination[1], destination[0]],\n        },\n        properties: {\n          color: \"#64be14\",\n          ref: destinationRef,\n        },\n      },\n    ],\n  };\n}\n\nexport default function calculatePlan(\n  origin: [number, number],\n  destination: [number, number],\n  callback: (f: FeatureCollection) => void\n): void {\n  queryEntrances(destination)\n    .then((entrances) => {\n      if (!entrances.length) {\n        return [\n          { id: -1, type: \"node\", lat: destination[0], lon: destination[1] },\n        ];\n      }\n      return entrances;\n    })\n    .then((targets) => {\n      targets.forEach((target) => {\n        const planner = new FlexibleRoadPlanner();\n        planner\n          .query({\n            from: { latitude: origin[0], longitude: origin[1] },\n            to: { latitude: target.lat, longitude: target.lon },\n            roadNetworkOnly: true,\n          })\n          .take(1)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .on(\"data\", async (path: any) => {\n            const completePath = await planner.completePath(path);\n            // eslint-disable-next-line no-console\n            console.log(\"Plan\", completePath, \"from\", origin, \"to\", target);\n            const [geometry, obstacles, obstacleWays] = extractGeometry(\n              completePath\n            );\n            const geoJSON = geometryToGeoJSON(\n              origin,\n              [target.lat, target.lon],\n              target.tags?.[\"ref\"] || target.tags?.[\"addr:unit\"],\n              geometry,\n              obstacles,\n              obstacleWays\n            );\n            callback(geoJSON);\n          });\n      });\n    });\n}\n","export interface OverpassResponse {\n  version: number;\n  generator: string;\n  osm3s: Osm3S;\n  elements: Element[];\n}\n\nexport interface Osm3S {\n  timestamp_osm_base: Date;\n  copyright: string;\n}\n\nexport type Element =\n  | ElementWithCoordinates\n  | (ElementCore & Partial<Coordinates>);\n\ntype ElementWithCoordinates = ElementCore & Coordinates;\n\ninterface ElementCore {\n  type: string;\n  id: number;\n  tags?: Tags;\n}\n\nexport interface Coordinates {\n  lat: number;\n  lon: number;\n}\n\nexport interface Tags {\n  entrance?: string;\n  operator?: string;\n  ref?: string;\n  \"addr:unit\"?: string;\n}\n\nconst buildEntranceQuery = (lat: number, lon: number): string => `\n  [out:json][timeout:25];\n  (\n    relation(around:10, ${lat}, ${lon})[building];\n    way(r);\n    way(around:10, ${lat}, ${lon})[building];\n  )->.b;\n  // gather results\n  (\n    node(w.b)[entrance];\n  );\n  // print results\n  out body;\n  >;\n  out skel qt;\n`;\n\nexport const queryEntrances = (\n  latLng: [number, number]\n): Promise<ElementWithCoordinates[]> => {\n  const url = new URL(\"https://overpass-api.de/api/interpreter\");\n  url.searchParams.append(\"data\", buildEntranceQuery(latLng[0], latLng[1]));\n  return fetch(url.toString()).then((response) =>\n    response.json().then((body: OverpassResponse) => {\n      const targets = body.elements.filter(\n        (element) =>\n          element.type === \"node\" &&\n          \"lat\" in element &&\n          element.lat != null &&\n          \"lon\" in element &&\n          element.lon != null &&\n          element.tags &&\n          element.tags.entrance\n      );\n      // FIXME: How to make the compiler deduce this by itself from above?\n      // For example, see https://github.com/Microsoft/TypeScript/issues/16069\n      return targets as ElementWithCoordinates[];\n    })\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport MapGL, { Source, Layer, ViewportProps, MapRequest } from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\n\nimport {\n  routePointLayer,\n  routePointSymbolLayer,\n  routeLineLayer,\n} from \"./map-style\";\nimport PinMarker from \"./components/PinMarker\";\nimport calculatePlan, { geometryToGeoJSON } from \"./planner\";\nimport \"./App.css\";\n\ninterface State {\n  viewport: Partial<ViewportProps>;\n  origin: [number, number];\n  destination: [number, number];\n  route: FeatureCollection;\n}\n\nconst initialOrigin: [number, number] = [60.16295, 24.93071];\nconst initialDestination: [number, number] = [60.16259, 24.93155];\nconst initialState: State = {\n  origin: initialOrigin,\n  destination: initialDestination,\n  route: geometryToGeoJSON(initialOrigin, initialDestination),\n  viewport: {\n    latitude: 60.163,\n    longitude: 24.931,\n    zoom: 16,\n    bearing: 0,\n    pitch: 0,\n  },\n};\n\nconst transformRequest = (originalURL?: string): MapRequest => {\n  if (!originalURL) {\n    throw Error(\"This cannot happen as URL isn't actually optional.\");\n  }\n  const url = originalURL.replace(\n    \"https://static.hsldev.com/mapfonts/Klokantech Noto Sans\",\n    \"https://fonts.openmaptiles.org/Klokantech Noto Sans\"\n  );\n  return { url };\n};\n\nconst App: React.FC = () => {\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    setState(\n      (prevState): State => ({\n        ...prevState,\n        route: geometryToGeoJSON(state.origin, state.destination),\n      })\n    );\n    calculatePlan(state.origin, state.destination, (geojson) => {\n      setState(\n        (prevState): State => {\n          // don't use the result if the parameters changed meanwhile\n          if (\n            state.origin !== prevState.origin ||\n            state.destination !== prevState.destination\n          ) {\n            return prevState;\n          }\n          geojson.features.push(...prevState.route.features);\n          return {\n            ...prevState,\n            route: geojson,\n          };\n        }\n      );\n    });\n  }, [state.origin, state.destination]);\n\n  return (\n    <div data-testid=\"app\" className=\"App\">\n      <header className=\"App-header\">\n        <h2>Gatesolve</h2>\n      </header>\n      <MapGL\n        // This is according to the Get Started materials:\n        // https://uber.github.io/react-map-gl/docs/get-started/get-started/\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...state.viewport}\n        width=\"100%\"\n        height=\"90%\"\n        mapStyle=\"https://raw.githubusercontent.com/HSLdevcom/hsl-map-style/master/simple-style.json\"\n        transformRequest={transformRequest}\n        onViewportChange={(viewport): void =>\n          setState((prevState): State => ({ ...prevState, viewport }))\n        }\n        onClick={(event): void => {\n          // Filter out events not caused by left mouse button\n          if (event.srcEvent.button !== 0) return;\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              destination: [event.lngLat[1], event.lngLat[0]],\n            })\n          );\n        }}\n        onContextMenu={(event): void => {\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin: [event.lngLat[1], event.lngLat[0]],\n            })\n          );\n          event.srcEvent.preventDefault();\n        }}\n      >\n        <Source type=\"geojson\" data={state.route}>\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routeLineLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointSymbolLayer}\n          />\n        </Source>\n        <PinMarker\n          marker={{\n            draggable: true,\n            onDragEnd: (event): void => {\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  origin: [event.lngLat[1], event.lngLat[0]],\n                })\n              );\n            },\n            longitude: state.origin[1],\n            latitude: state.origin[0],\n          }}\n          pin={{ style: { fill: \"#00afff\", stroke: \"#fff\" } }}\n        />\n        <PinMarker\n          marker={{\n            draggable: true,\n            onDragEnd: (event): void => {\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  destination: [event.lngLat[1], event.lngLat[0]],\n                })\n              );\n            },\n            longitude: state.destination[1],\n            latitude: state.destination[0],\n          }}\n          pin={{ style: { fill: \"#64be14\", stroke: \"#fff\" } }}\n        />\n      </MapGL>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}