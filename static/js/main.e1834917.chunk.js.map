{"version":3,"sources":["map-style.ts","components/Pin.tsx","components/PinMarker.tsx","planner-config.ts","planner.ts","overpass.ts","App.tsx","mapbox-utils.ts","serviceWorker.ts","index.tsx"],"names":["routeLineLayer","id","type","paint","routePointLayer","filter","allEntrancesLayer","minzoom","maxzoom","allEntrancesSymbolLayer","layout","routePointSymbolLayer","SVG_PATH","Pin","height","style","fill","stroke","dataTestId","data-testid","viewBox","pointerEvents","d","cursor","PinMarker","pin","otherPinProps","marker","offsetLeft","offsetTop","className","rootUri","process","REACT_APP_ROUTABLE_TILES","replace","RoutableTileProviderLocalhost","coordinate","zoom","x","y","RoutableTileProviderDefault","container","unbind","TYPES","RoutableTileProvider","bind","to","inSingletonScope","whenTargetTagged","RoutingPhase","Base","Transit","Planner","FlexibleRoadPlanner","extractGeometry","path","coordinates","obstacles","obstacleWays","Map","legs","getSteps","forEach","step","node","stopLocation","context","through","definedTags","has","set","get","push","startLocation","longitude","latitude","console","log","freeformTags","Array","from","values","geometryToGeoJSON","origin","targets","entrances","features","geometry","properties","color","target","lon","lat","entrance","ref","tags","opacity","latLngToDestination","latLng","initialState","destination","route","viewport","bearing","pitch","transformRequest","originalURL","Error","url","parseLatLng","text","split","map","Number","fitBounds","viewportProps","latLngs","WebMercatorViewport","minLng","Math","min","maxLng","max","minLat","maxLat","padding","top","bottom","left","right","App","useRef","mapViewport","geolocationTimestamp","useEffect","current","mapboxgl","getMap","on","iconId","startsWith","size","svgData","pinAsSVG","imageId","ratio","window","devicePixelRatio","canvas","document","createElement","width","ctx","getContext","img","Image","svgDataUrl","encodeURIComponent","onload","drawImage","addImage","getImageData","pixelRatio","src","addImageSVG","urlMatch","useRouteMatch","useState","state","setState","params","prevState","history","useHistory","location","pathname","URL","searchParams","append","fetch","toString","then","response","json","body","elements","element","queryEntrances","result","length","callback","planner","setProfileID","query","take","a","completePath","geoJSON","undefined","calculatePlan","geojson","sources","onSuggestionSelected","event","suggestion","source_id","mapStyle","onViewportChange","onHover","feature","mapboxOverlaysElement","querySelector","onClick","srcEvent","button","lngLat","onContextMenu","preventDefault","positionOptions","enableHighAccuracy","trackUserLocation","onGeolocate","geolocationPosition","timestamp","coords","tiles","data","draggable","onDragEnd","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1834917.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Expression } from \"mapbox-gl\";\n\nexport const routeLineLayer = {\n  id: \"route-line\",\n  type: \"line\",\n  paint: {\n    \"line-opacity\": [\"coalesce\", [\"get\", \"opacity\"], 0.5] as Expression,\n    \"line-width\": 5,\n    \"line-color\": [\"get\", \"color\"] as Expression,\n  },\n};\n\nexport const routePointLayer = {\n  id: \"route-point\",\n  type: \"circle\",\n  paint: {\n    \"circle-opacity\": [\"coalesce\", [\"get\", \"opacity\"], 1] as Expression,\n    \"circle-radius\": 5,\n    \"circle-color\": [\"get\", \"color\"] as Expression,\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n\nexport const allEntrancesLayer = {\n  id: \"entrance-point\",\n  \"source-layer\": \"osm\",\n  type: \"circle\",\n  minzoom: 12,\n  maxzoom: 15.99999,\n  paint: {\n    \"circle-radius\": [\n      \"interpolate\",\n      [\"linear\"],\n      [\"zoom\"],\n      12, // At zoom 12 or less,\n      1, // circle radius is 1.\n      14, // At zoom 14,\n      3, // circle radius is 3.\n      15, // At zoom 15 or more,\n      5, // circle radius is 5.\n    ] as Expression,\n    \"circle-color\": \"#64be14\",\n  },\n  filter: [\"has\", \"entrance\"],\n};\n\nexport const allEntrancesSymbolLayer = {\n  id: \"entrance-symbol\",\n  \"source-layer\": \"osm\",\n  type: \"symbol\",\n  minzoom: 16,\n  paint: {\n    \"text-color\": \"#fff\",\n    \"text-halo-color\": \"#64be14\",\n    \"text-halo-width\": 3,\n  },\n  layout: {\n    \"text-field\": [\n      \"coalesce\",\n      [\"get\", \"ref\"],\n      [\"get\", \"addr:unit\"],\n    ] as Expression,\n    \"text-anchor\": (\"center\" as unknown) as Expression,\n    \"text-font\": [\"Klokantech Noto Sans Regular\"],\n    \"text-size\": 24,\n    \"text-offset\": [0, -1.3],\n    \"icon-image\": \"icon-pin-48-#64be14-#fff\",\n    \"icon-anchor\": (\"bottom\" as unknown) as Expression,\n    \"icon-allow-overlap\": true,\n    \"text-allow-overlap\": true,\n  },\n  filter: [\"has\", \"entrance\"],\n};\n\nexport const routePointSymbolLayer = {\n  id: \"route-point-symbol\",\n  type: \"symbol\",\n  paint: {\n    \"text-color\": \"#000\",\n    \"text-halo-color\": \"#fff\",\n    \"text-halo-width\": 3,\n  },\n  layout: {\n    \"text-field\": [\"get\", \"ref\"] as Expression,\n    \"text-anchor\": (\"center\" as unknown) as Expression,\n    \"text-font\": [\"Klokantech Noto Sans Regular\"],\n    \"text-size\": 24,\n    \"text-offset\": [0, -0.05],\n  },\n  filter: [\"==\", \"Point\", [\"geometry-type\"]],\n};\n","import React from \"react\";\n\nexport interface PinProps {\n  height?: string;\n  style?: React.CSSProperties;\n  dataTestId?: string;\n}\n\nconst SVG_VIEWBOX = \"-1 -1 17 17\";\nconst SVG_PATH =\n  \"M7.5 0C5.068 0 2.23 1.486 2.23 5.27c0 2.568 4.054 8.244 5.27 9.73c1.081-1.486 5.27-7.027 5.27-9.73C12.77 1.487 9.932 0 7.5 0z\";\n\nexport const pinAsSVG = (size: number, style: string): string => `\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"${size}px\"\n  height=\"${size}px\"\n  style=\"${style}\"\n  viewBox=\"${SVG_VIEWBOX}\"\n>\n  <path d=\"${SVG_PATH}\" />\n</svg>`;\n\nconst Pin: React.FC<PinProps> = ({\n  height = \"50\",\n  style = { fill: \"#444\", stroke: \"none\" },\n  dataTestId,\n}) => {\n  return (\n    <svg\n      data-testid={dataTestId}\n      height={height}\n      style={style}\n      viewBox={SVG_VIEWBOX}\n      pointerEvents=\"none\"\n    >\n      <path d={SVG_PATH} pointerEvents=\"visiblepainted\" cursor=\"pointer\" />\n    </svg>\n  );\n};\n\nexport default Pin;\n","import React from \"react\";\nimport { Marker, MarkerProps } from \"react-map-gl\";\n\nimport Pin, { PinProps } from \"./Pin\";\n\nimport \"./PinMarker.css\";\n\nexport interface PinMarkerProps {\n  marker: MarkerProps;\n  pin: PinProps;\n}\n\nconst PinMarker: React.FC<PinMarkerProps> = ({\n  pin: { height = \"50\", ...otherPinProps },\n  marker,\n}) => {\n  return (\n    <Marker\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...marker}\n      offsetLeft={-height / 2}\n      offsetTop={-height}\n      className=\"PinMarker\"\n    >\n      <Pin\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...{ height, ...otherPinProps }}\n      />\n    </Marker>\n  );\n};\n\nexport default PinMarker;\n","import \"reflect-metadata\";\n\nimport { FlexibleRoadPlanner } from \"plannerjs\";\n\nimport { RoutableTileCoordinate } from \"plannerjs/lib/entities/tiles/coordinate\";\nimport TYPES from \"plannerjs/lib/types\";\nimport RoutableTileProviderDefault from \"plannerjs/lib/fetcher/tiles/RoutableTileProviderDefault\";\nimport IRoutableTileProvider from \"plannerjs/lib/fetcher/tiles/IRoutableTileProvider\";\nimport RoutingPhase from \"plannerjs/lib/enums/RoutingPhase\";\n\nimport container from \"plannerjs/lib/configs/road_planner\";\n\nconst rootUri =\n  process.env.REACT_APP_ROUTABLE_TILES?.replace(/\\/$/, \"\") ||\n  \"https://tile.olmap.org/routable-tiles\";\n\nclass RoutableTileProviderLocalhost extends RoutableTileProviderDefault {\n  // eslint-disable-next-line class-methods-use-this\n  public getIdForTileCoords(coordinate: RoutableTileCoordinate): string {\n    return `${rootUri}/${coordinate.zoom}/${coordinate.x}/${coordinate.y}`;\n  }\n}\n\ncontainer.unbind(TYPES.RoutableTileProvider);\ncontainer\n  .bind<IRoutableTileProvider>(TYPES.RoutableTileProvider)\n  .to(RoutableTileProviderLocalhost)\n  .inSingletonScope()\n  .whenTargetTagged(\"phase\", RoutingPhase.Base);\ncontainer\n  .bind<IRoutableTileProvider>(TYPES.RoutableTileProvider)\n  .to(RoutableTileProviderLocalhost)\n  .inSingletonScope()\n  .whenTargetTagged(\"phase\", RoutingPhase.Transit);\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Planner = FlexibleRoadPlanner;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  Feature,\n  FeatureCollection,\n  Geometry,\n  GeoJsonProperties,\n} from \"geojson\";\n\nimport { Planner } from \"./planner-config\";\n\nimport { ElementWithCoordinates } from \"./overpass\";\n\nfunction extractGeometry(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path: any\n): [\n  Array<[number, number]>,\n  Array<[number, number]>,\n  Array<Array<[number, number]>>\n] {\n  const coordinates = [] as Array<[number, number]>;\n  const obstacles = [] as Array<[number, number]>;\n  const obstacleWays = new Map();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  path.legs[0].getSteps().forEach((step: any) => {\n    const node = step.stopLocation;\n    if (\n      path.context[step.through]?.definedTags[\n        \"https://w3id.org/openstreetmap/terms#highway\"\n      ] === \"https://w3id.org/openstreetmap/terms#Steps\"\n    ) {\n      if (!obstacleWays.has(step.through)) {\n        obstacleWays.set(step.through, []);\n      }\n      obstacleWays\n        .get(step.through)\n        .push(\n          [\n            step.startLocation.longitude as number,\n            step.startLocation.latitude as number,\n          ],\n          [\n            step.stopLocation.longitude as number,\n            step.stopLocation.latitude as number,\n          ]\n        );\n    }\n    if (node.definedTags?.[\"https://w3id.org/openstreetmap/terms#barrier\"]) {\n      // eslint-disable-next-line no-console\n      console.log(\n        step.through,\n        node.definedTags[\n          \"https://w3id.org/openstreetmap/terms#barrier\"\n        ].replace(/^.*#/, \"\"),\n        node.id,\n        node.definedTags,\n        node.freeformTags\n      );\n      obstacles.push([node.longitude as number, node.latitude as number]);\n    }\n    coordinates.push([\n      step.startLocation.longitude as number,\n      step.startLocation.latitude as number,\n    ]);\n    coordinates.push([\n      step.stopLocation.longitude as number,\n      step.stopLocation.latitude as number,\n    ]);\n  });\n  return [coordinates, obstacles, Array.from(obstacleWays.values())];\n}\n\nexport function geometryToGeoJSON(\n  origin?: [number, number],\n  targets?: Array<ElementWithCoordinates>,\n  entrances?: Array<ElementWithCoordinates>,\n  coordinates?: Array<[number, number]>,\n  obstacles?: Array<[number, number]>,\n  obstacleWays?: Array<Array<[number, number]>>\n): FeatureCollection {\n  const features = [] as Array<Feature<Geometry, GeoJsonProperties>>;\n  if (origin) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [origin[1], origin[0]],\n      },\n      properties: {\n        color: \"#00afff\",\n      },\n    });\n  }\n  if (targets) {\n    targets.forEach((target) => {\n      features.push({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [target.lon, target.lat],\n        },\n        properties: {\n          color: \"#64be14\",\n        },\n      });\n    });\n  }\n  if (entrances) {\n    entrances.forEach((entrance) => {\n      features.push({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [entrance.lon, entrance.lat],\n        },\n        properties: {\n          color: \"#00ffff\",\n          ref: entrance.tags?.[\"ref\"] || entrance.tags?.[\"addr:unit\"],\n          opacity: 0,\n        },\n      });\n    });\n  }\n  if (coordinates) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"LineString\",\n        coordinates,\n      },\n      properties: {\n        color: \"#000\",\n      },\n    });\n  }\n  if (obstacleWays) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"MultiLineString\",\n        coordinates: obstacleWays,\n      },\n      properties: {\n        color: \"#dc0451\",\n        opacity: 1,\n      },\n    });\n  }\n  if (obstacles) {\n    features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"MultiPoint\",\n        coordinates: obstacles,\n      },\n      properties: {\n        color: \"#dc0451\",\n        ref: \"!\",\n      },\n    });\n  }\n  return {\n    type: \"FeatureCollection\",\n    features,\n  };\n}\n\nexport default function calculatePlan(\n  origin: [number, number],\n  targets: Array<ElementWithCoordinates>,\n  callback: (f: FeatureCollection) => void\n): void {\n  targets.forEach((target) => {\n    const planner = new Planner();\n    // XXX setProfileID requires URL to start with scheme, so guess\n    const protocol = process.env.NODE_ENV === \"production\" ? \"https\" : \"http\";\n    planner\n      .setProfileID(`${protocol}://${process.env.PUBLIC_URL}/delivery.json`)\n      .query({\n        from: { latitude: origin[0], longitude: origin[1] },\n        to: { latitude: target.lat, longitude: target.lon },\n      })\n      .take(1)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .on(\"data\", async (path: any) => {\n        const completePath = await planner.completePath(path);\n        // eslint-disable-next-line no-console\n        console.log(\"Plan\", completePath, \"from\", origin, \"to\", target);\n        const [geometry, obstacles, obstacleWays] = extractGeometry(\n          completePath\n        );\n        const geoJSON = geometryToGeoJSON(\n          origin,\n          [target],\n          undefined,\n          geometry,\n          obstacles,\n          obstacleWays\n        );\n        callback(geoJSON);\n      });\n  });\n}\n","export interface OverpassResponse {\n  version: number;\n  generator: string;\n  osm3s: Osm3S;\n  elements: Element[];\n}\n\nexport interface Osm3S {\n  timestamp_osm_base: Date;\n  copyright: string;\n}\n\nexport type Element =\n  | ElementWithCoordinates\n  | (ElementCore & Partial<Coordinates>);\n\nexport type ElementWithCoordinates = ElementCore & Coordinates;\n\ninterface ElementCore {\n  type: string;\n  id: number;\n  tags?: Tags;\n}\n\nexport interface Coordinates {\n  lat: number;\n  lon: number;\n}\n\nexport interface Tags {\n  entrance?: string;\n  operator?: string;\n  ref?: string;\n  \"addr:unit\"?: string;\n}\n\nconst buildEntranceQuery = (lat: number, lon: number): string => `\n  [out:json][timeout:25];\n  (\n    relation(around:10, ${lat}, ${lon})[building];\n    way(r);\n    way(around:10, ${lat}, ${lon})[building];\n  )->.b;\n  // gather results\n  (\n    node(w.b)[entrance];\n  );\n  // print results\n  out body;\n  >;\n  out skel qt;\n`;\n\nexport const queryEntrances = (\n  target: ElementWithCoordinates\n): Promise<ElementWithCoordinates[]> => {\n  const url = new URL(\"https://overpass-api.de/api/interpreter\");\n  url.searchParams.append(\"data\", buildEntranceQuery(target.lat, target.lon));\n  return fetch(url.toString()).then((response) =>\n    response.json().then((body: OverpassResponse) => {\n      const targets = body.elements.filter(\n        (element) =>\n          element.type === \"node\" &&\n          \"lat\" in element &&\n          element.lat != null &&\n          \"lon\" in element &&\n          element.lon != null &&\n          element.tags &&\n          element.tags.entrance\n      );\n      // FIXME: How to make the compiler deduce this by itself from above?\n      // For example, see https://github.com/Microsoft/TypeScript/issues/16069\n      return targets as ElementWithCoordinates[];\n    })\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { match } from \"react-router-dom\";\nimport MapGL, {\n  Source,\n  Layer,\n  WebMercatorViewport,\n  GeolocateControl,\n  ViewportProps,\n  MapRequest,\n} from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FeatureCollection } from \"geojson\";\nimport { ReactAutosuggestGeocoder } from \"react-autosuggest-geocoder\";\n\nimport {\n  routePointLayer,\n  routePointSymbolLayer,\n  routeLineLayer,\n  allEntrancesLayer,\n  allEntrancesSymbolLayer,\n} from \"./map-style\";\nimport PinMarker from \"./components/PinMarker\";\nimport { pinAsSVG } from \"./components/Pin\";\nimport calculatePlan, { geometryToGeoJSON } from \"./planner\";\nimport { queryEntrances, ElementWithCoordinates } from \"./overpass\";\nimport { addImageSVG } from \"./mapbox-utils\";\nimport \"./App.css\";\n\ninterface State {\n  viewport: Partial<ViewportProps>;\n  origin: [number, number];\n  destination: ElementWithCoordinates;\n  entrances: Array<ElementWithCoordinates>;\n  route: FeatureCollection;\n}\n\nconst latLngToDestination = (\n  latLng: [number, number]\n): ElementWithCoordinates => ({\n  id: -1,\n  type: \"node\",\n  lat: latLng[0],\n  lon: latLng[1],\n});\n\nconst initialOrigin: [number, number] = [60.16295, 24.93071];\nconst initialDestination: ElementWithCoordinates = latLngToDestination([\n  60.16259,\n  24.93155,\n]);\nconst initialState: State = {\n  origin: initialOrigin,\n  destination: initialDestination,\n  entrances: [],\n  route: geometryToGeoJSON(),\n  viewport: {\n    latitude: 60.163,\n    longitude: 24.931,\n    zoom: 16,\n    bearing: 0,\n    pitch: 0,\n  },\n};\n\nconst transformRequest = (originalURL?: string): MapRequest => {\n  if (!originalURL) {\n    throw Error(\"This cannot happen as URL isn't actually optional.\");\n  }\n  const url = originalURL.replace(\n    \"https://static.hsldev.com/mapfonts/Klokantech Noto Sans\",\n    \"https://fonts.openmaptiles.org/Klokantech Noto Sans\"\n  );\n  return { url };\n};\n\nconst parseLatLng = (text: string): [number, number] =>\n  text.split(\",\").map(Number) as [number, number];\n\nconst fitBounds = (\n  viewportProps: Partial<ViewportProps>,\n  latLngs: Array<[number, number]>\n): Partial<ViewportProps> => {\n  const viewport = new WebMercatorViewport(viewportProps);\n  const minLng = Math.min(...latLngs.map((x) => x[1]));\n  const maxLng = Math.max(...latLngs.map((x) => x[1]));\n  const minLat = Math.min(...latLngs.map((x) => x[0]));\n  const maxLat = Math.max(...latLngs.map((x) => x[0]));\n  const padding = 20;\n  const markerSize = 50;\n  const occludedTop = 40;\n  const circleRadius = 5;\n  return viewport.fitBounds(\n    [\n      [minLng, minLat],\n      [maxLng, maxLat],\n    ],\n    {\n      padding: {\n        top: padding + occludedTop + markerSize,\n        bottom: padding + circleRadius,\n        left: padding + markerSize / 2,\n        right: padding + markerSize / 2,\n      },\n    }\n  );\n};\n\nconst App: React.FC = () => {\n  const map = useRef<MapGL>(null);\n  const mapViewport = useRef<Partial<ViewportProps>>({});\n  const geolocationTimestamp = useRef<number | null>(null);\n\n  // Install a callback to dynamically create pin icons that our map styles use\n  useEffect(() => {\n    if (!map.current) {\n      return; // No map yet, so nothing to do\n    }\n    const mapboxgl = map.current.getMap();\n    mapboxgl?.on(\"styleimagemissing\", ({ id: iconId }) => {\n      if (!iconId.startsWith(\"icon-pin-\")) {\n        return; // We only know how to generate pin icons\n      }\n      const [, , size, fill, stroke] = iconId.split(\"-\"); // e.g. icon-pin-48-green-#fff\n      const svgData = pinAsSVG(size, `fill: ${fill}; stroke: ${stroke}`);\n      addImageSVG(mapboxgl, iconId, svgData, size);\n    });\n  }, [map]);\n\n  const urlMatch = useRouteMatch({\n    path: \"/route/:from/:to\",\n  }) as match<{ from: string; to: string }>;\n\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    if (urlMatch) {\n      const origin = parseLatLng(urlMatch.params.from);\n      const destination = parseLatLng(urlMatch.params.to);\n      const viewport = fitBounds(mapViewport.current, [origin, destination]);\n      setState(\n        (prevState): State => ({\n          ...prevState,\n          origin,\n          destination: latLngToDestination(destination),\n          viewport: { ...mapViewport.current, ...viewport },\n        })\n      );\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const destination = [state.destination.lat, state.destination.lon];\n    if (\n      history.location.pathname !== `/route/${state.origin}/${destination}/`\n    ) {\n      history.replace(`/route/${state.origin}/${destination}/`);\n    }\n  }, [history, state.origin, state.destination]);\n\n  useEffect(() => {\n    queryEntrances(state.destination).then((result) => {\n      setState(\n        (prevState): State => {\n          if (prevState.destination !== state.destination) {\n            return prevState;\n          }\n          const entrances = result.length ? result : [state.destination];\n\n          return {\n            ...prevState,\n            entrances,\n          };\n        }\n      );\n    });\n  }, [state.destination]);\n\n  // Set off routing calculation when inputs change; collect results in state.route\n  useEffect(() => {\n    let targets = [] as Array<ElementWithCoordinates>;\n\n    // Try to find the destination among the entrances\n    state.entrances.forEach((entrance) => {\n      if (\n        state.destination.type === entrance.type &&\n        state.destination.id === entrance.id\n      ) {\n        targets = [entrance];\n      }\n    });\n\n    // If the destination entrance wasn't found, route to all entrances\n    if (!targets.length) {\n      targets = state.entrances;\n    }\n\n    // Clear previous routing results by setting an empty result set\n    setState(\n      (prevState): State => ({\n        ...prevState,\n        route: geometryToGeoJSON(),\n      })\n    );\n\n    calculatePlan(state.origin, targets, (geojson) => {\n      setState(\n        (prevState): State => {\n          // don't use the result if the parameters changed meanwhile\n          if (\n            state.origin !== prevState.origin ||\n            state.entrances !== prevState.entrances ||\n            state.destination !== prevState.destination\n          ) {\n            return prevState;\n          }\n          geojson.features.push(...prevState.route.features);\n          return {\n            ...prevState,\n            route: geojson,\n          };\n        }\n      );\n    });\n  }, [state.origin, state.entrances]); // eslint-disable-line react-hooks/exhaustive-deps\n  // XXX: state.destination is missing above as we need to wait for state.entrances to change as well\n\n  return (\n    <div data-testid=\"app\" className=\"App\">\n      <header className=\"App-header\">\n        <h2>Gatesolve</h2>\n      </header>\n      <ReactAutosuggestGeocoder\n        url=\"https://api.digitransit.fi/geocoding/v1/\"\n        sources=\"oa,osm,nlsfi\"\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onSuggestionSelected={(event: any, { suggestion }: any): any => {\n          const { origin } = state;\n          const destination = [\n            suggestion.geometry.coordinates[1],\n            suggestion.geometry.coordinates[0],\n          ] as [number, number];\n          const viewport = fitBounds(mapViewport.current, [\n            origin,\n            destination,\n          ]);\n          const [type, id] = suggestion.properties.source_id.split(\":\");\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin,\n              destination: {\n                lat: destination[0],\n                lon: destination[1],\n                type,\n                id: Number(id),\n              },\n              entrances: [],\n              viewport: { ...mapViewport.current, ...viewport },\n            })\n          );\n        }}\n      />\n      <MapGL\n        ref={map}\n        // This is according to the Get Started materials:\n        // https://uber.github.io/react-map-gl/docs/get-started/get-started/\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...state.viewport}\n        width=\"100%\"\n        height=\"90%\"\n        mapStyle=\"https://raw.githubusercontent.com/HSLdevcom/hsl-map-style/master/simple-style.json\"\n        transformRequest={transformRequest}\n        onViewportChange={(viewport): void => {\n          mapViewport.current = viewport;\n          setState((prevState): State => ({ ...prevState, viewport }));\n        }}\n        onHover={(event): void => {\n          // Inspect the topmost feature under click\n          const feature = event.features?.[0];\n          // Set cursor shape depending whether we would click an entrance\n          const cursor = feature?.properties.entrance ? \"pointer\" : \"grab\";\n          // FIXME: Better way to set the pointer shape or at least find the element\n          const mapboxOverlaysElement = document.querySelector(\n            \".overlays\"\n          ) as HTMLElement;\n          if (mapboxOverlaysElement) {\n            mapboxOverlaysElement.style.cursor = cursor;\n          }\n        }}\n        onClick={(event): void => {\n          if (\n            // Filter out events not caused by left mouse button\n            event.srcEvent.button !== 0 ||\n            // FIXME GeolocateControl lets clicks through\n            event.target.className === \"mapboxgl-ctrl-icon\" ||\n            // FIXME Attribution lets clicks through\n            event.target.className ===\n              \"mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact\"\n          ) {\n            return;\n          }\n\n          // Inspect the topmost feature under click\n          const feature = event.features[0];\n          if (feature?.properties.entrance) {\n            // If an entrance was clicked, set it as the destination\n            setState(\n              (prevState): State => ({\n                ...prevState,\n                destination: {\n                  id: feature.properties[\"@id\"],\n                  type: feature.properties[\"@type\"],\n                  lat: feature.geometry.coordinates[1],\n                  lon: feature.geometry.coordinates[0],\n                },\n              })\n            );\n          } else {\n            // As a fallback, set the clicked coordinates as the destination\n            setState(\n              (prevState): State => ({\n                ...prevState,\n                destination: latLngToDestination([\n                  event.lngLat[1],\n                  event.lngLat[0],\n                ]),\n              })\n            );\n          }\n        }}\n        onContextMenu={(event): void => {\n          setState(\n            (prevState): State => ({\n              ...prevState,\n              origin: [event.lngLat[1], event.lngLat[0]],\n            })\n          );\n          event.srcEvent.preventDefault();\n        }}\n      >\n        <GeolocateControl\n          className=\"mapboxgl-ctrl-bottom-left\"\n          positionOptions={{ enableHighAccuracy: true }}\n          trackUserLocation\n          // FIXME: The type is wrong in @types/react-map-gl\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          onGeolocate={(geolocationPosition: any): void => {\n            if (\n              geolocationTimestamp.current === null ||\n              geolocationPosition.timestamp - geolocationTimestamp.current >\n                10000\n            ) {\n              geolocationTimestamp.current = geolocationPosition.timestamp;\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  origin: [\n                    geolocationPosition.coords.latitude,\n                    geolocationPosition.coords.longitude,\n                  ],\n                })\n              );\n            }\n          }}\n        />\n        <Source\n          id=\"osm-qa-tiles\"\n          type=\"vector\"\n          tiles={[\"https://tile.olmap.org/osm-qa-tiles/{z}/{x}/{y}.pbf\"]}\n          minzoom={12}\n          maxzoom={12}\n        >\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...allEntrancesLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...allEntrancesSymbolLayer}\n          />\n        </Source>\n        <Source type=\"geojson\" data={state.route}>\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routeLineLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointLayer}\n          />\n          <Layer\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...routePointSymbolLayer}\n          />\n        </Source>\n        <PinMarker\n          marker={{\n            draggable: true,\n            onDragEnd: (event): void => {\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  origin: [event.lngLat[1], event.lngLat[0]],\n                })\n              );\n            },\n            longitude: state.origin[1],\n            latitude: state.origin[0],\n          }}\n          pin={{\n            dataTestId: \"origin\",\n            style: { fill: \"#00afff\", stroke: \"#fff\" },\n          }}\n        />\n        <PinMarker\n          marker={{\n            draggable: true,\n            onDragEnd: (event): void => {\n              setState(\n                (prevState): State => ({\n                  ...prevState,\n                  destination: latLngToDestination([\n                    event.lngLat[1],\n                    event.lngLat[0],\n                  ]),\n                })\n              );\n            },\n            longitude: state.destination.lon,\n            latitude: state.destination.lat,\n          }}\n          pin={{\n            dataTestId: \"destination\",\n            style: { fill: \"#64be14\", stroke: \"#fff\" },\n          }}\n        />\n      </MapGL>\n    </div>\n  );\n};\n\nexport default App;\n","import { Map } from \"mapbox-gl\";\n\n// eslint-disable-next-line import/prefer-default-export\nexport const addImageSVG = (\n  mapboxgl: Map,\n  imageId: string,\n  svgData: string,\n  size: number\n): void => {\n  const ratio = window.devicePixelRatio;\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = ratio * size;\n  canvas.height = ratio * size;\n\n  const ctx = canvas.getContext(\"2d\");\n  const img = new Image(size, size);\n\n  const svgDataUrl = `data:image/svg+xml,${encodeURIComponent(svgData)}`;\n\n  img.onload = (): void => {\n    if (!ctx) {\n      throw Error(\"canvas.getContext failed\");\n    }\n\n    ctx.drawImage(img, 0, 0, ratio * size, ratio * size);\n    mapboxgl.addImage(\n      imageId,\n      ctx.getImageData(0, 0, ratio * size, ratio * size),\n      { pixelRatio: ratio }\n    );\n  };\n\n  img.src = svgDataUrl;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}